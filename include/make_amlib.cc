/*
-------------------------------------------------------------------------
OBJECT NAME:	make_amlib.c

FULL NAME:	Make amlibfn.h

DESCRIPTION:	Read nimbus/include/amlib.fns file, parse, sort, and generate
		include files that are included by nimbus.
-------------------------------------------------------------------------
*/

#include <cstdio>
#include <cstdlib>
#include <cstring>

#define INPUT_FILE	"amlib.fns"
#define OUTPUT_FILE	"amlibfn.h"
#define PROTO_FILE	"amlibProto.h"
#define XLATE_FILE	"xlatefns.h"

#define BUFFSIZE	1024

void SortFns(int beg, int end);
bool CheckForDuplicates(int nRecords);

char	buffer[BUFFSIZE], *file[10000];

/* -------------------------------------------------------------------- */
int main(int argc, char *argv[])
{
  int	i, cnt;
  char	name[80], constructor[80], xlateFn[80], sFun[80];
  FILE	*in, *out, *xlate, *proto;


  // Read nimbus/include/amlib.fns file.
  if ((in = fopen(INPUT_FILE, "r")) == NULL) {
    fprintf(stderr, "make_amlib: can't open %s\n", INPUT_FILE);
    exit(1);
    }

  for (cnt = 0; fgets(buffer, BUFFSIZE, in); ) {
    if (buffer[0] == '#' || strlen(buffer) < 12)
      continue;

    if ((file[cnt] = (char *)malloc(strlen(buffer)+1)) == NULL) {
      fprintf(stderr, "make_amlib: out of memory\n");
      exit(1);
      }

    strcpy(file[cnt++], buffer);
    }

  fclose(in);


  SortFns(0, cnt - 1);

  // Generate output files.
  if ((out = fopen(OUTPUT_FILE, "w+")) == NULL) {
    fprintf(stderr, "make_amlib: can't open %s\n", OUTPUT_FILE);
    exit(1);
    }

  if ((proto = fopen(PROTO_FILE, "w+")) == NULL) {
    fprintf(stderr, "make_amlib: can't open %s\n", PROTO_FILE);
    exit(1);
    }

  if ((xlate = fopen(XLATE_FILE, "w+")) == NULL) {
    fprintf(stderr, "make_amlib: can't open %s\n", XLATE_FILE);
    exit(1);
    }

  /* I put this check after destroying the output files, so nimbus will not build.
   */
  if (CheckForDuplicates(cnt) == true)
    return(1);


  fprintf(out, "/*\n-------------------------------------------------------------------------\n");
  fprintf(out, "OBJECT NAME:\tamlibfn.h\n\n");

  fprintf(out, "DESCRIPTION:\tHeader File defining derived Variables with associated\n");
  fprintf(out, "\t\tprocessing functions.\n\n");

  fprintf(out, "NOTE:\t\tDO NOT modify this file.  This is automatically generated.\n");
  fprintf(out, "\t\tMake changes in amlib.fns\n");
  fprintf(out, "-------------------------------------------------------------------------\n*/\n\n");

  fprintf(out, "#ifndef DERIVEDEF_H\n#define DERIVEDEF_H\n\n");
  fprintf(xlate, "#ifndef DERIVEDEF_H\n#define DERIVEDEF_H\n\n");

  fprintf(out, "struct _dnfn deriveftns[] =\n  {\n");
  fprintf(xlate, "struct _dnfn deriveftns[] =\n\t{\n");

  fprintf(proto, "/* This file is automatically generated, do not edit.*/\n\n");
  fprintf(proto, "#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n");
  fprintf(proto, "void\n");

  for (i = 0; i < cnt; ++i)
    {
    file[i][0] = ' ';
    file[i][strlen(file[i])-2] = '\0';

    fprintf(out, "  {%s },\n", file[i]);

    sscanf(file[i], "%s %s %s %s", name, constructor, xlateFn, sFun);
    constructor[strlen(constructor)-1] = '\0';
    xlateFn[strlen(xlateFn)-1] = '\0';
//    sFun[strlen(sFun)-1] = '\0';

    if (strrchr(constructor, ')'))
      strcpy(constructor, strrchr(constructor, ')')+1);

    if (strcmp(constructor, "NULL"))
      if (strcmp(sFun, "NULL") == 0)
        fprintf(proto, "\t%s(var_base *),\n", constructor);
      else
        fprintf(proto, "\t%s(var_base *),\n", constructor);

    if (strcmp(xlateFn, "NULL") && strncmp(xlateFn, "(void*)", 7))
      fprintf(proto, "\t%s(RAWTBL *, void *, NR_TYPE *),\n", xlateFn);

    if (strcmp(sFun, "NULL"))
      fprintf(proto, "\t%s(DERTBL *),\n", sFun);


    /* xlatefn.h for rtplot. */
    if (strcmp(xlateFn, "NULL") && strcmp(sFun, "NULL") == 0)
      /* Eliminate PMS histograms */
      if (xlateFn[2] != 'O' && xlateFn[2] != 'P' && xlateFn[2] != 'T' &&
           strcmp(xlateFn, "xlHVPS") && strcmp(xlateFn, "xlardma") &&
           strncmp(xlateFn, "xl2dDead", 8))
        fprintf(xlate, "\t\t%s\tNULL,\t\t%s,\tNULL,\n", name, xlateFn);
    }

  fprintf(out, "  { NULL,\t\tNULL,\tNULL,\tNULL }\n  };\n\n#endif\n");
  fprintf(xlate, "\tNULL,\t\tNULL,\tNULL,\tNULL\n\t};\n\n#endif\n");
  fprintf(proto, "\tNimbusDummy(void);\n\n");
  fprintf(proto, "#ifdef __cplusplus\n}\n#endif\n");

  fclose(out);
  fclose(xlate);
  fclose(proto);

  return(0);

}	/* END MAIN */

/* -------------------------------------------------------------------- */
bool CheckForDuplicates(int nRecords)
{
  int i;
  char name[50], prevName[50], *s, *e;

  for (i = 0; i < nRecords-1; ++i)
  {
    s = strchr(file[i], '"') + 1;
    e = strchr(s, '"');
    strncpy(name, s, e-s);
    name[e-s] = '\0';

    if (i > 0 && strcmp(name, prevName) == 0)
    {
      fprintf(stderr, "WARNING: Duplicate name in amlib.fns!  [%s]\n", name);
      return true;
    }
    strcpy(prevName, name);
  }
  return false;
}

/* -------------------------------------------------------------------- */
char	*temp, *mid;

void SortFns(int beg, int end)
{
	int	x = beg,
		y = end;

	mid = file[(x + y) / 2];

	while (x <= y)
		{
	 	while (strcmp(file[x], mid) < 0)
			++x;

		while (strcmp(file[y], mid) > 0)
			--y;

		if (x <= y)
			{
			temp = file[x];
			file[x] = file[y];
			file[y] = temp;
			++x; --y;
			}
		}

	if (beg < y)
		SortFns(beg, y);

	if (x < end)
		SortFns(x, end);

}	/* END SORTFNS */

/* END MAKE_AMLIB.C */
