# -*- python -*-

import os
env = Environment(platform = 'posix',ENV= os.environ)
env['JLOCAL'] = os.environ['JLOCAL']

env.Append(CXXFLAGS='-g -Werror')
env.Append(CPPPATH = '/opt/local/include')
env.Append(LIBPATH = '/opt/local/lib')

# To get netcdf libraries on the link command line with static linking,
# they need to be added to the end of the link command.  Adding them to
# LINKFLAGS does not work, because LINKFLAGS is expanded on the command
# line *before* LIBFLAGS.  There is no way to specify the libraries as
# static in LIBS, since members of LIBS are always expanded to -l<lib>.
# The only way to avoid that would be to replace the _stripixes() function,
# and I don't want to go there.  I've been there, and it's not pretty.

env['NETCDFLIBS'] = ['-lnetcdf_c++', '-lnetcdf', '-lhdf5', '-lhdf5_hl']
env['LINKCOM'] = env['LINKCOM'] + " $NETCDFLIBS"


# If you rely on Configure to add libraries, you have to check for them in
# reverse order of their dependencies, ie, check for netcdf before
# netcdf_c++, otherwise netcdf_c++ cannot be linked.  However, when
# statically linking, that means the libraries need to be listed in LIBS in
# the reverse order they are checked by Configure.  Since at the moment
# Configure is not being used to add to LIBS, we don't need this.
# env['LIBS'].reverse()

# print env.Dump()

env.Program('nc_dips.cc')

Alias('install', env.Install('$JLOCAL/bin', 'nc_dips'))
