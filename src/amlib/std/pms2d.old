/*
-------------------------------------------------------------------------
OBJECT NAME:	pms2d.c

FULL NAME:	Derived computations for the PMS2D C & P probes.

ENTRY POINTS:	sc2d()

STATIC FNS:	none

DESCRIPTION:	

DEPENDANCIES:	A2D?	- Actual FSSP data
		TAS	- True Air Speed

OUTPUT:		C2D?	- Concentrations
		CONC2	- Total concentration
		DISP2
		DBAR2
		PLWC2	- Liquid Water Content

REFERENCES:	none

REFERENCED BY:	Compute()

COPYRIGHT:	University Corporation for Atmospheric Research, 2000
-------------------------------------------------------------------------
*/

#include "nimbus.h"
#include "amlib.h"
#include "pms.h"

static int      FIRST_BIN[MAX_PMS2], LAST_BIN[MAX_PMS2];
static NR_TYPE  responseTime[MAX_PMS2], armDistance[MAX_PMS2], DENS[MAX_PMS2],
                resolution[MAX_PMS2];
static double   PLWFAC[MAX_PMS2], DBZFAC[MAX_PMS2];

static NR_TYPE  total_concen[MAX_PMS2], dbar[MAX_PMS2], plwc[MAX_PMS2],
                disp[MAX_PMS2], dbz[MAX_PMS2];

static NR_TYPE  radius[MAX_PMS2][BINS_32], cell_size[MAX_PMS2][BINS_32],
                eaw[MAX_PMS2][BINS_32]; /* Effective Sample Width       */

void    ComputePMS1DParams(NR_TYPE radius[], NR_TYPE eaw[], NR_TYPE cell_size[],                float minRange, float resolution, int nDiodes, int length),

        ComputeDOF(NR_TYPE radius[], NR_TYPE tas, NR_TYPE dof[],
                int FirstBin, int LastBin, float RES, NR_TYPE RESPONSE_TIME);


/* -------------------------------------------------------------------- */
void sTwodInit(RAWTBL *varp)
{
  int		i, probeNum, nDiodes;
  char		*p, *serialNumber;
  NR_TYPE	DOF, beamDiameter;

  serialNumber = varp->SerialNumber;
  probeNum = varp->ProbeCount;

  sprintf(buffer, PMS_SPEC_FILE, ProjectDirectory, ProjectNumber);
  InitPMSspecs(buffer);

  if ((p = GetPMSparameter(serialNumber, "FIRST_BIN")) == NULL) {
    printf("%s: FIRST_BIN not found.\n", serialNumber); exit(1);
    }
  FIRST_BIN[probeNum] = atoi(p);

  if ((p = GetPMSparameter(serialNumber, "LAST_BIN")) == NULL) {
    printf("%s: LAST_BIN not found.\n", serialNumber); exit(1);
    }
  LAST_BIN[probeNum] = atoi(p);

  if ((p = GetPMSparameter(serialNumber, "RANGE_STEP")) == NULL) {
    printf("%s: RANGE_STEP not found.\n", serialNumber); exit(1);
    }
  resolution[probeNum] = atof(p);

  if ((p = GetPMSparameter(serialNumber, "NDIODES")) == NULL) {
    printf("%s: NDIODES not found.\n", serialNumber); exit(1);
    }
  nDiodes = atoi(p);

  if ((p = GetPMSparameter(serialNumber, "RESPONSE_TIME")) == NULL) {
    printf("%s: RESPONSE_TIME not found.\n", serialNumber); exit(1);
    }
  responseTime[probeNum] = atof(p);

  if ((p = GetPMSparameter(serialNumber, "ARM_DISTANCE")) == NULL) {
    printf("%s: ARM_DISTANCE not found.\n", serialNumber); exit(1);
    }
  armDistance[probeNum] = atof(p);

  if ((p = GetPMSparameter(serialNumber, "DENS")) == NULL) {
    printf("%s: DENS not found.\n", serialNumber); exit(1);
    }
  DENS[probeNum] = atof(p);

  if ((p = GetPMSparameter(serialNumber, "PLWFAC")) == NULL) {
    printf("%s: PLWFAC not found.\n", serialNumber); exit(1);
    }
  PLWFAC[probeNum] = atof(p);

  if ((p = GetPMSparameter(serialNumber, "DBZFAC")) == NULL) {
    printf("%s: DBZFAC not found.\n", serialNumber); exit(1);
    }
  DBZFAC[probeNum] = atof(p);

  ReleasePMSspecs();
printf("%s:\n", varp->name);
  ComputePMS1DParams(radius[probeNum], eaw[probeNum], cell_size[probeNum],
        15.0, resolution[probeNum], nDiodes, varp->Length);

  if (varp->name[3] == 'C')	/* EAW is fixed .8 for 2DC */
    for (i = 0; i < BINS_32; ++i)
      eaw[probeNum][i] = 0.8;

}	/* END STWODINIT */

/* -------------------------------------------------------------------- */
void sTwoD(DERTBL *varp)
{
  int		i, probeNum;
  NR_TYPE	*actual, *concentration, *dia;
  NR_TYPE	tas;		/* True Air Speed	*/
  NR_TYPE	dof[BINS_32], sampleVolume[BINS_32];

  actual	= GetVector(varp, 0, BINS_32);
  tas		= GetSampleFor1D(varp, 1);
  probeNum	= varp->ProbeCount;

  dia           = cell_size[probeNum];
  concentration = &AveragedData[varp->LRstart];

  ComputeDOF(radius[probeNum], tas, dof, FIRST_BIN[probeNum],
        LAST_BIN[probeNum], resolution[probeNum], responseTime[probeNum]);
//printf("%s\n", varp->name);
  for (i = FIRST_BIN[probeNum]; i < LAST_BIN[probeNum]; ++i)
    {
    if (dof[i] > armDistance[probeNum])
      dof[i] = armDistance[probeNum];

    sampleVolume[i] = tas * (dof[i] * eaw[probeNum][i]) * 0.001;
//printf("%f %f %f\n", sampleVolume[i], dof[i], eaw[probeNum][i]);
    }

#define PLWC
#define DBZ

#include "pms1d_cv"

}	/* END SC2D */

/* -------------------------------------------------------------------- */
void sconc2(varp)
DERTBL  *varp;
{
  PutSample(varp, total_concen[varp->ProbeCount]);
}

/* -------------------------------------------------------------------- */
void sdisp2(varp)
DERTBL  *varp;
{
  PutSample(varp, disp[varp->ProbeCount]);
}

/* -------------------------------------------------------------------- */
void splwc2(varp)
DERTBL  *varp;
{
  PutSample(varp, plwc[varp->ProbeCount]);
}

/* -------------------------------------------------------------------- */
void sdbz2(varp)
DERTBL  *varp;
{
  PutSample(varp, dbz[varp->ProbeCount]);
}

/* -------------------------------------------------------------------- */
void sdbar2(varp)
DERTBL  *varp;
{
  PutSample(varp, dbar[varp->ProbeCount]);
}

/* END PMS2D.C */
