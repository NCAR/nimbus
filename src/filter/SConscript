# -*- python -*-
import os
import platform

Import('env')

env.Append(LIBPATH=['#/lib'])
env.Append(LIBPATH=['$JLOCAL/lib'])
if os.path.exists('/usr/lib/openmotif'):
  env.Append(LIBPATH=['/usr/lib/openmotif'])

# In order:
#  AMLIB (Atmospheric Mathmatical Library) calculations.
#  raf 'building blocks'.
#  File access stuff.
#  X windows/GUI.
#  General math libraries.
#  ADS3 real-time libraries.  Moved lower to 'if env.realtime'
env['LIBS'] = Split("""
  std user xlate
  hdr_api
  VarDB domx logx log4cpp 
  boost_regex boost_filesystem boost_system
  raf
  ncaru netcdf hdf5_hl hdf5 pq
  Xm Xt X11
  gsl gslcblas m
""")

sources = Split("""
UDP_Base.cc
Xwin.c
adsIO.c
ads3IO.cc
amlibfn.c
async.c
average.c
calco.c
cb_defs.c
cb_edit.c
cb_main.c
cb_pause.c
circbuff.c
compute.c
config.cc
config_win.c
depend.c
despike.c
dq.c
error.c
filter.c
globals.cc
grnd_feed.cc
hdr_decode.c
hrloop.c
init.c
injectsd.cc
log.c
logfile.c
lrloop.c
memalloc.cc
minmax.cc
netcdf.c
nimbus.c
order.c
phase_shift.c
pms1d.c
popen.c
probe.c
psql.cc
brdcast.cc
rd_blanks.c
rd_ddor.c
rd_defs.c
rd_lag.c
rd_meta.c
rd_mod.c
rd_spike.c
rd_sum.c
rd_xmit.c
rec_decode.c
rtloop.c
search.c
setup.c
textfile.c
timeseg.c
""")
# interp.c

objects = env.StaticObject(Split("""
Interpolator.cc
"""))


md5o = env.StaticObject('md5.cc', CCFLAGS=env['CCFLAGS']+['-Wno-parentheses'])

if int(env.realtime):
  env.Append(CPPPATH=[os.path.join(env['NIDAS_PATH'],'include')])
  sources = [sources, 'rtloop3.cc', md5o]
  env.Append(LIBS=['nidas', 'nidas_dynld', 'nidas_util', 'XmlRpcpp', 'xerces-c', 'bz2', 'z', 'pthread'])
  if (platform.machine() == 'x86_64'):
    nlibpath = os.path.join(env['NIDAS_PATH'],'lib64')
  else:
    nlibpath = os.path.join(env['NIDAS_PATH'],'lib')
  env.Append(LIBPATH=[nlibpath])
  # This may be unnecessary and even undesirable with the introduction of
  # the ld.so.conf file.  However, leave it in for now, especially for the
  # case of building nimbus against the buildbot nidas.
  env.Append(_LIBFLAGS=['-Wl,-R', nlibpath])


nimbus = env.Program('nimbus', sources + objects)

env.Install('$JLOCAL/bin', nimbus)

env.Default(nimbus)



test_sources = Split("""
tests/test_Interpolator.cc
tests/test_parseInt.cc
""")

nt = env.Program('nimbus_tests', test_sources + objects, 
                 LIBS=env['LIBS']+['gtest_main', 'gtest'])
env.Alias('nimbus_tests', nt)

env.Alias('test', env.Command('xtest', nt, nt[0].abspath))

