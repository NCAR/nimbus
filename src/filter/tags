!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.4	//
ADS_WORD	adsIO.c	53;"	d	file:
ADSfileName	cb_main.c	/^static char	ADSfileName[MAXPATHLEN];$/;"	v	file:
ADSrecord	globals.c	/^char	*ADSrecord;		\/* Raw ADS record as read from tape.	*\/$/;"	v
APP_CLASS	nimbus.c	32;"	d	file:
ARRAY_TOKENS	rd_defs.c	36;"	d	file:
AVAPS	globals.c	/^	AVAPS,			\/* Is AVAPS dropesonde present.		*\/$/;"	v
AVAPSrecord	globals.c	/^char	*AVAPSrecord[MAX_AVAPS];\/* Raw AVAPS data as read from tape.	*\/$/;"	v
AccessProjectFile	popen.c	/^int AccessProjectFile(char filename[], char mode[])$/;"	f
AddPMS1dAttrs	pms1d.c	/^void AddPMS1dAttrs(int ncid, RAWTBL *rp)$/;"	f
AddProbeToList	probe.c	/^void AddProbeToList(char name[], int type)$/;"	f
AddToCircularBuffer	circbuff.c	/^char *AddToCircularBuffer(CircularBuffer *cb)$/;"	f
AddToPMS1DprobeList	pms1d.c	/^void AddToPMS1DprobeList($/;"	f
AddToPMS1DprobeList	pms1d_rt.c	/^void AddToPMS1DprobeList(char probe[], char location[], char serial_num[], int type)$/;"	f
AddVariableToRAWdespikeList	despike.c	/^void AddVariableToRAWdespikeList(RAWTBL *varp)$/;"	f
AddVariableToRAWlagList	phase_shift.c	/^void AddVariableToRAWlagList(RAWTBL *varp)$/;"	f
AddVariableToSDIdespikeList	despike.c	/^void AddVariableToSDIdespikeList(SDITBL *varp)$/;"	f
AddVariableToSDIlagList	phase_shift.c	/^void AddVariableToSDIlagList(SDITBL *varp)$/;"	f
Aircraft	globals.c	/^	Aircraft, FlightNumberInt;$/;"	v
AllocateDataArrays	memalloc.c	/^void AllocateDataArrays()$/;"	f
AppShell	nimbus.c	/^Widget	AppShell;		\/* The Main Application Shell *\/$/;"	v
ApplyCalCoes	calco.c	/^void ApplyCalCoes(NR_TYPE *record)$/;"	f
ApplyVariableMods	cb_edit.c	/^void ApplyVariableMods(Widget w, XtPointer client, XtPointer call)$/;"	f
ArraysInitialized	memalloc.c	/^static bool	ArraysInitialized = false;$/;"	v	file:
AsyncFP	async.c	/^static FILE	*AsyncFP;$/;"	v	file:
AsyncFileEnabled	globals.c	/^	AsyncFileEnabled,$/;"	v
AsyncQueue	async.c	/^static Queue	*AsyncQueue[MAX_ASYNC_VARS];$/;"	v	file:
AsyncVar	async.c	/^static RAWTBL	*AsyncVar[MAX_ASYNC_VARS];$/;"	v	file:
Average	average.c	/^void Average($/;"	f
AverageSDI	average.c	/^void AverageSDI(NR_TYPE *in_data, NR_TYPE *out_data, SDITBL *sp)$/;"	f
AverageSampledData	average.c	/^void AverageSampledData()$/;"	f
AveragedData	globals.c	/^NR_TYPE	*SampledData, *AveragedData, *HighRateData;$/;"	v
BUFF_SIZE	rd_defs.c	34;"	d	file:
BlankOutBadData	netcdf.c	/^void BlankOutBadData()$/;"	f
BtimeInt	timeseg.c	/^static int	BtimeInt[MAX_TIME_SLICES*4][3],$/;"	v	file:
COS_BLOCKED	adsIO.c	50;"	d	file:
CancelSetup	cb_main.c	/^void CancelSetup(Widget w, XtPointer client, XtPointer call)$/;"	f
CheckAndAddAttrs	rd_defs.c	/^void CheckAndAddAttrs(int fd, int varid, char name[])$/;"	f
CheckForTimeGap	timeseg.c	/^int CheckForTimeGap(struct Hdr_blk *ADShdr, int initMode)$/;"	f
CleanOutUnwantedVariables	depend.c	/^void CleanOutUnwantedVariables()$/;"	f
ClearMRFilters	filter.c	/^void ClearMRFilters()$/;"	f
CloseADSfile	adsIO.c	/^int CloseADSfile()$/;"	f
CloseLogFile	logfile.c	/^void CloseLogFile()$/;"	f
CloseNetCDF	netcdf.c	/^void CloseNetCDF()$/;"	f
CloseRemoveLogFile	logfile.c	/^void CloseRemoveLogFile()$/;"	f
CloseSQL	psql.c	/^void CloseSQL()$/;"	f
ComputeHighRateDerived	compute.c	/^void ComputeHighRateDerived()$/;"	f
ComputeLowRateDerived	compute.c	/^void ComputeLowRateDerived()$/;"	f
ComputeOrder	globals.c	/^DERTBL	*ComputeOrder[MAX_DERIVE];	\/* Compute Order for derived	*\/$/;"	v
CreateCircularBuffer	circbuff.c	/^CircularBuffer *CreateCircularBuffer(int nbuffers, int nbytes)$/;"	f
CreateEditDefaultsWindow	cb_defs.c	/^void CreateEditDefaultsWindow()$/;"	f
CreateEditWindow	Xwin.c	/^Widget CreateEditWindow(Widget parent)$/;"	f
CreateFlightInfoWindow	cb_flight.c	/^void CreateFlightInfoWindow()$/;"	f
CreateListLineItem	cb_main.c	/^XmString CreateListLineItem(void *pp, int var_type)$/;"	f
CreateMainWindow	Xwin.c	/^Widget CreateMainWindow(Widget parent)$/;"	f
CreateNetCDF	netcdf.c	/^void CreateNetCDF(char fileName[])$/;"	f
CreatePauseWindows	cb_pause.c	/^void CreatePauseWindows(Widget topLevel)$/;"	f
CreateProbeMenu	Xwin.c	/^void CreateProbeMenu()$/;"	f
CreateSetupWindow	Xwin.c	/^Widget CreateSetupWindow(Widget parent)$/;"	f
CreateTimeSliceWindow	cb_time.c	/^Widget CreateTimeSliceWindow(Widget parent)$/;"	f
DEFAULT_TI_LENGTH	netcdf.c	55;"	d	file:
DEGREE	interp.c	34;"	d	file:
DecodeADSrecord	rec_decode.c	/^void DecodeADSrecord($/;"	f
DecodeHeader	hdr_decode.c	/^int DecodeHeader(char header_file[])$/;"	f
Defaults	globals.c	/^DEFAULT	*Defaults[MAX_DEFAULTS];	\/* Values from 'Defaults' file	*\/$/;"	v
DependIndexLookup	depend.c	/^int DependIndexLookup(DERTBL *dp, int which_dep)$/;"	f
DependMsg	depend.c	/^char	*DependMsg =$/;"	v
DespikeData	despike.c	/^void DespikeData(CircularBuffer *LRCB, int index)$/;"	f
Dirty	cb_flight.c	/^	bool	Dirty;$/;"	m	struct:flightInfo	file:
DiskData	adsIO.c	/^static bool	DiskData = false;$/;"	v	file:
DismissDefaultsWindow	cb_defs.c	/^void DismissDefaultsWindow(Widget w, XtPointer client, XtPointer call)$/;"	f
DismissEditWindow	cb_edit.c	/^void DismissEditWindow(Widget w, XtPointer client, XtPointer call)$/;"	f
DismissFlightWindow	cb_flight.c	/^void DismissFlightWindow(Widget w, XtPointer client, XtPointer call)$/;"	f
DismissTimeSliceWindow	cb_time.c	/^void DismissTimeSliceWindow(Widget w, XtPointer client, XtPointer call)$/;"	f
EditDefaultsFile	cb_defs.c	/^void EditDefaultsFile(Widget w, XtPointer client, XtPointer call)$/;"	f
EditDefaultsWindow	cb_defs.c	/^static Widget	Shell004, EditDefaultsWindow, defaultText[MAX_DEFAULTS];$/;"	v	file:
EditFlightInfo	cb_flight.c	/^void EditFlightInfo(Widget w, XtPointer client, XtPointer call)$/;"	f
EditTimeSlices	cb_time.c	/^void EditTimeSlices(Widget w, XtPointer client, XtPointer call)$/;"	f
EditVariable	cb_edit.c	/^void EditVariable(Widget w, XtPointer client, XmListCallbackStruct *call)$/;"	f
EditWindow	nimbus.c	/^Widget	Shell002, EditWindow;$/;"	v
EngageSignals	cb_main.c	/^static void EngageSignals()$/;"	f	file:
EtimeInt	timeseg.c	/^		EtimeInt[MAX_TIME_SLICES*4][3];$/;"	v	file:
ExtractHeaderIntoFile	adsIO.c	/^char *ExtractHeaderIntoFile(char *fileName)$/;"	f
FIRST_DATA_RECORD	adsIO.c	58;"	d	file:
FeedBack	globals.c	/^	FeedBack, SampleOffset,	\/* Used by amlib fns, set in hrloop.c	*\/$/;"	v
FiftyTo25	filter.c	/^static filterData	TwoFiftyTo25, FiftyTo25, OneTo25, FiveTo25, TenTo25,$/;"	v	file:
FillListWidget	cb_main.c	/^void FillListWidget()$/;"	f
Filter	filter.c	/^void Filter(CircularBuffer *PSCB)$/;"	f
FindFirstLogicalRecord	adsIO.c	/^long FindFirstLogicalRecord($/;"	f
FindNextDataRecord	adsIO.c	/^static long FindNextDataRecord(char buff[])$/;"	f	file:
FindNextLogicalRecord	adsIO.c	/^long FindNextLogicalRecord(char record[], long endtime)$/;"	f
FiveTo25	filter.c	/^static filterData	TwoFiftyTo25, FiftyTo25, OneTo25, FiveTo25, TenTo25,$/;"	v	file:
FlightDate	netcdf.c	/^int	FlightDate[3];		\/\/ HACK: for amlib$/;"	v
FlightInfo	cb_flight.c	/^	} FlightInfo[nFlightInfo];$/;"	v
FlightInfoWindow	cb_flight.c	/^static Widget		Shell005, FlightInfoWindow, flightText[nFlightInfo];$/;"	v	file:
FlightNumber	globals.c	/^char	*ProjectDirectory, *ProjectNumber, *ProjectName, FlightNumber[12];$/;"	v
FlightNumberInt	globals.c	/^	Aircraft, FlightNumberInt;$/;"	v
FlushXEvents	Xwin.c	/^void FlushXEvents()$/;"	f
FormatTimeSegmentsForOutputFile	timeseg.c	/^void FormatTimeSegmentsForOutputFile(char *buff)$/;"	f
FreeDataArrays	memalloc.c	/^void FreeDataArrays()$/;"	f
FreeTextFile	textfile.c	/^void FreeTextFile(char **list)$/;"	f
GPScount	hdr_decode.c	/^static int	InertialSystemCount, GPScount, twoDcnt, NephCnt;$/;"	v	file:
GenerateComputeOrder	order.c	/^void GenerateComputeOrder()$/;"	f
GetBuffer	circbuff.c	/^char *GetBuffer(CircularBuffer *cb, int offset)$/;"	f
GetDefaultsValue	rd_defs.c	/^NR_TYPE *GetDefaultsValue(char target[], char var[])$/;"	f
GetNext2Dfile	adsIO.c	/^static int GetNext2Dfile()$/;"	f	file:
GetNextADSfile	adsIO.c	/^static int GetNextADSfile()$/;"	f	file:
GetPMS1DAttrsForSQL	pms1d.c	/^void GetPMS1DAttrsForSQL(RAWTBL *rp, char sql_buff[])$/;"	f
GetPreviousTime	timeseg.c	/^int GetPreviousTime()$/;"	f
GetProbeList	probe.c	/^char **GetProbeList()$/;"	f
GetProbeType	probe.c	/^unsigned long GetProbeType(char name[])$/;"	f
GetUserTimeIntervals	timeseg.c	/^void GetUserTimeIntervals() \/* From TimeSliceWindow	*\/$/;"	f
HDR_WORD	adsIO.c	54;"	d	file:
HDRversion	globals.c	/^float	HDRversion;$/;"	v
HandleError	error.c	/^void HandleError(char err_msg[])$/;"	f
HandleWarning	error.c	/^void HandleWarning(char msg[], XtCallbackProc okCB, XtCallbackProc cancelCB)$/;"	f
HighRateData	globals.c	/^NR_TYPE	*SampledData, *AveragedData, *HighRateData;$/;"	v
HighRateLoop	hrloop.c	/^int HighRateLoop(long starttime, long endtime)$/;"	f
HzDelay	filter.c	/^static int	PSCBindex, currentHz, HzDelay;$/;"	v	file:
INDEX	lrloop.c	41;"	d	file:
INDEX	lrloop_bak.c	35;"	d	file:
INDEX	olrloop.c	35;"	d	file:
INDEX	slrloop.c	38;"	d	file:
InertialSystemCount	hdr_decode.c	/^static int	InertialSystemCount, GPScount, twoDcnt, NephCnt;$/;"	v	file:
InitAsyncModule	async.c	/^void InitAsyncModule(char fileName[])$/;"	f
InitMRFilters	filter.c	/^void InitMRFilters()$/;"	f
InitSQL	psql.c	/^bool InitSQL()$/;"	f
Initialize	init.c	/^void Initialize()$/;"	f
Interactive	globals.c	/^	Interactive,$/;"	v
IsThisAnAsyncRecord	adsIO.c	/^static bool IsThisAnAsyncRecord(short buff[])$/;"	f	file:
LITTON51_present	globals.c	/^bool	LITTON51_present,	\/* hdr_decode.c & adsIO.c		*\/$/;"	v
LITTON51_start	globals.c	/^long	LITTON51_start;		\/* hdr_decode.c & adsIO.c		*\/$/;"	v
LRINDEX	hrloop.c	41;"	d	file:
LinearInterpAndSingleStageFilter	filter.c	/^static void LinearInterpAndSingleStageFilter($/;"	f	file:
LinearInterpolate	interp.c	/^NR_TYPE LinearInterpolate(NR_TYPE p1, NR_TYPE p2, int ms_gap, int ms_want)$/;"	f
LinearSearchTable	search.c	/^int LinearSearchTable(char **list, int n, char target[])$/;"	f
ListPosition	cb_edit.c	/^static int	VariableType, ListPosition;$/;"	v	file:
LoadProductionSetupFile	globals.c	/^	LoadProductionSetupFile,$/;"	v
LoadSetup	cb_main.c	/^void LoadSetup(Widget w, XtPointer client, XtPointer call)$/;"	f
LoadSetup_OK	setup.c	/^void LoadSetup_OK(Widget w, XtPointer client, XmFileSelectionBoxCallbackStruct *call)$/;"	f
LoadSynthetic	cb_main.c	/^void  LoadSynthetic(Widget w, XtPointer client, XtPointer call)$/;"	f
LoadSynthetic_OK	setup.c	/^void LoadSynthetic_OK(Widget w, XtPointer client, XmFileSelectionBoxCallbackStruct *call)$/;"	f
LogDespikeInfo	despike.c	/^void LogDespikeInfo()$/;"	f
LogFile	logfile.c	/^FILE		*LogFile = NULL;$/;"	v
LogMessage	cb_main.c	/^void LogMessage(char msg[])$/;"	f
LowRateLoop	lrloop.c	/^int LowRateLoop(long starttime, long endtime)$/;"	f
LowRateLoop	lrloop_bak.c	/^int LowRateLoop(long starttime, long endtime)$/;"	f
LowRateLoop	olrloop.c	/^int LowRateLoop(long starttime, long endtime)$/;"	f
LowRateLoop	slrloop.c	/^int LowRateLoop(long starttime, long endtime)$/;"	f
MAX_ASYNC_VARS	async.c	46;"	d	file:
MAX_PROBES	probe.c	30;"	d	file:
MAX_VARIABLES	despike.c	38;"	d	file:
MAX_VARIABLES	phase_shift.c	40;"	d	file:
MCR_WORD	adsIO.c	56;"	d	file:
MainWindow	nimbus.c	/^Widget	Shell000, MainWindow;$/;"	v
MapCalCof	cb_edit.c	/^void MapCalCof(Widget w, XtPointer client, XtPointer call)$/;"	f
MarkDirty	cb_defs.c	/^static void MarkDirty(Widget w, XtPointer indx, XtPointer call)$/;"	f	file:
Mode	globals.c	/^int	Mode,		\/* RealTime or PostProcessing (winput or nimbus)*\/$/;"	v
N	interp.c	33;"	d	file:
NBUFFERS	lrloop.c	40;"	d	file:
NBUFFERS	lrloop_bak.c	34;"	d	file:
NBUFFERS	olrloop.c	34;"	d	file:
NBUFFERS	slrloop.c	37;"	d	file:
NETCDF_FORMAT_VERSION	netcdf.c	53;"	d	file:
NEW_SEG	timeseg.c	42;"	d	file:
NLRBUFFERS	hrloop.c	38;"	d	file:
NPOINTS	phase_shift.c	265;"	d	file:
NPSBUFFERS	hrloop.c	39;"	d	file:
Name	cb_flight.c	/^	char	*Name;$/;"	m	struct:flightInfo	file:
NephCnt	hdr_decode.c	/^static int	InertialSystemCount, GPScount, twoDcnt, NephCnt;$/;"	v	file:
Next2dRecord	adsIO.c	/^bool Next2dRecord(P2d_rec *record, int probeCnt, short id)$/;"	f
Next2dRecord	pms1d_rt.c	/^bool Next2dRecord(P2d_rec *record, int probeCnt, short id)$/;"	f
NextTimeInterval	timeseg.c	/^int NextTimeInterval(long *start, long *end)$/;"	f
NextWidget	Xwin.c	/^void NextWidget(Widget w, int client, XtPointer call)$/;"	f
ONE_WORD	adsIO.c	418;"	d	file:
OneTo25	filter.c	/^static filterData	TwoFiftyTo25, FiftyTo25, OneTo25, FiveTo25, TenTo25,$/;"	v	file:
Open2dFile	adsIO.c	/^bool Open2dFile(char file[], int probeCnt)$/;"	f
Open2dFile	pms1d_rt.c	/^bool Open2dFile(char file[], int probeCnt)$/;"	f
OpenLogFile	logfile.c	/^void OpenLogFile()$/;"	f
OpenProjectFile	popen.c	/^FILE *OpenProjectFile(char filename[], char mode[], int action)$/;"	f
OutputFileName	cb_main.c	/^char		OutputFileName[MAXPATHLEN];  \/* Export to xlate\/rdma.c *\/$/;"	v
PMS	hdr_decode.c	/^	} PMS;$/;"	t	file:
PSCBindex	filter.c	/^static int	PSCBindex, currentHz, HzDelay;$/;"	v	file:
PauseContinue	cb_pause.c	/^void PauseContinue(Widget w, XtPointer client, XtPointer call)$/;"	f
PauseFlag	globals.c	/^	PauseFlag,$/;"	v
PauseProcessing	cb_pause.c	/^void PauseProcessing(Widget w, XtPointer client, XtPointer call)$/;"	f
PauseShell	cb_pause.c	/^static Widget	PauseShell;$/;"	v	file:
PauseStop	cb_pause.c	/^void PauseStop(Widget w, XtPointer client, XtPointer call)$/;"	f
PauseWhatToDo	globals.c	/^	PauseWhatToDo,$/;"	v
PauseXTV	cb_pause.c	/^void PauseXTV(Widget w, XtPointer client, XtPointer call)$/;"	f
PhaseShift	phase_shift.c	/^void PhaseShift($/;"	f
PolyInterp	interp.c	/^NR_TYPE PolyInterp(NR_TYPE yaxis[], int ms_gap, int ms_want)$/;"	f
PrintSetup	cb_main.c	/^void PrintSetup(Widget w, XtPointer client, XtPointer call)$/;"	f
Proceed	cb_main.c	/^void Proceed(Widget w, XtPointer client, XtPointer call)$/;"	f
ProcessArgv	init.c	/^void ProcessArgv(int argc, char **argv)$/;"	f
ProcessingRate	globals.c	/^	ProcessingRate,$/;"	v
ProductionRun	globals.c	/^	ProductionRun,$/;"	v
ProjectDirectory	globals.c	/^char	*ProjectDirectory, *ProjectNumber, *ProjectName, FlightNumber[12];$/;"	v
ProjectName	globals.c	/^char	*ProjectDirectory, *ProjectNumber, *ProjectName, FlightNumber[12];$/;"	v
ProjectNumber	globals.c	/^char	*ProjectDirectory, *ProjectNumber, *ProjectName, FlightNumber[12];$/;"	v
QCenabled	globals.c	/^	QCenabled;		\/* QC Library, currently not enabled.	*\/$/;"	v
QueryOutputFile	cb_main.c	/^void QueryOutputFile(Widget w, XtPointer client, XtPointer call)$/;"	f
QueueMissingData	netcdf.c	/^void QueueMissingData(int h, int m, int s, int nRecords)$/;"	f
Quit	cb_main.c	/^void Quit(Widget w, XtPointer client, XtPointer call)$/;"	f
RANGE_NAME	pms1d_rt.c	35;"	d	file:
RAW_ADS	adsIO.c	49;"	d	file:
RTinit	rtloop.c	/^void RTinit()$/;"	f
RawData	globals.c	/^	RawData,		\/* No despiking or phase_shifting	*\/$/;"	v
ReadBatchFile	init.c	/^static void ReadBatchFile(char *fileName)$/;"	f	file:
ReadDefaultDerivedOutputRate	rd_ddor.c	/^void ReadDefaultDerivedOutputRate()$/;"	f
ReadDefaultsFile	rd_defs.c	/^void ReadDefaultsFile()$/;"	f
ReadDespikeFile	rd_spike.c	/^void ReadDespikeFile()$/;"	f
ReadModuloVariables	rd_mod.c	/^void ReadModuloVariables()$/;"	f
ReadStaticLags	rd_lag.c	/^void ReadStaticLags()$/;"	f
ReadSumVariables	rd_sum.c	/^void ReadSumVariables()$/;"	f
ReadTextFile	textfile.c	/^int ReadTextFile(char filename[], char **list)$/;"	f
RealTimeLoop	rtloop.c	/^void RealTimeLoop()$/;"	f
ReleaseCircularBuffer	circbuff.c	/^void ReleaseCircularBuffer(CircularBuffer *cb)$/;"	f
ResetDefaults	cb_defs.c	/^void ResetDefaults(Widget w, XtPointer client, XtPointer call)$/;"	f
ResetFlightInfo	cb_flight.c	/^void ResetFlightInfo(Widget w, XtPointer client, XtPointer call)$/;"	f
ResetProbeList	probe.c	/^void ResetProbeList()$/;"	f
ResetTimeGapper	timeseg.c	/^void ResetTimeGapper()$/;"	f
ResetTimeSliceWindow	cb_time.c	/^void ResetTimeSliceWindow(Widget w, XtPointer client, XtPointer call)$/;"	f
RunAMLIBinitializers	amlibfn.c	/^void RunAMLIBinitializers()$/;"	f
SDC	globals.c	/^bool    SDC=false;                    \/\/bool value that tells whether or not a constant value is being inserted for a variable$/;"	v
SDF	globals.c	/^bool    SDF=false;                    \/\/bool value that tells wheter or not synthetic data is being inserted from a file$/;"	v
SDI_WORD	adsIO.c	55;"	d	file:
SDP	globals.c	/^bool    SDP=false;                    \/\/bool value that tells wheter or not a variable is being modified by a function$/;"	v
SQL	rtloop.c	1;"	d	file:
SQLcommand	psql.c	/^void SQLcommand(char command[])$/;"	f
SampleOffset	globals.c	/^	FeedBack, SampleOffset,	\/* Used by amlib fns, set in hrloop.c	*\/$/;"	v
SampledData	globals.c	/^NR_TYPE	*SampledData, *AveragedData, *HighRateData;$/;"	v
SaveDefaults	cb_defs.c	/^void SaveDefaults(FILE *fp)	\/* Save modified defaults into "Setup" file *\/$/;"	f
SaveSetup	cb_main.c	/^void SaveSetup(Widget w, XtPointer client, XtPointer call)$/;"	f
SaveSetup_OK	setup.c	/^void SaveSetup_OK(Widget w, XtPointer client, XmFileSelectionBoxCallbackStruct *call)$/;"	f
SearchDERIVEFTNS	amlibfn.c	/^int SearchDERIVEFTNS(char target[])$/;"	f
SearchDataQuality	dq.c	/^char *SearchDataQuality(char target[])$/;"	f
SearchList	search.c	/^char *SearchList(char **list, char target[])$/;"	f
SearchTable	search.c	/^int SearchTable(char *table[], int ntable, char target[])$/;"	f
SearchTableSansLocation	search.c	/^int SearchTableSansLocation(char *table[], int ntable, char target[])$/;"	f
SetBaseTime	netcdf.c	/^void SetBaseTime(struct Hdr_blk *hdr)$/;"	f
SetDefaultsValue	cb_defs.c	/^void SetDefaultsValue(char target[], NR_TYPE *new_value)$/;"	f
SetFlightValue	cb_flight.c	/^void SetFlightValue(char target[], char new_value[])$/;"	f
SetHighRate	cb_main.c	/^void SetHighRate(Widget w, XtPointer client, XmToggleButtonCallbackStruct *call)$/;"	f
SetLookupSuffix	amlibfn.c	/^void SetLookupSuffix(char *new_suffix)$/;"	f
SetLowRate	cb_main.c	/^void SetLowRate(Widget w, XtPointer client, XmToggleButtonCallbackStruct *call)$/;"	f
SetPMS1DnetCDF	pms1d_rt.c	/^float *SetPMS1DnetCDF(char name[], int length)$/;"	f
SetUpDependencies	depend.c	/^void SetUpDependencies()$/;"	f
SetUpPMS1D_SHMEM	pms1d_rt.c	/^void SetUpPMS1D_SHMEM()$/;"	f
Set_SetupFileName	setup.c	/^void Set_SetupFileName(char s[])$/;"	f
SetupFileName	setup.c	/^static char	SetupFileName[MAXPATHLEN];$/;"	v	file:
SetupWindow	nimbus.c	/^Widget	Shell001, SetupWindow;$/;"	v
Shell000	nimbus.c	/^Widget	Shell000, MainWindow;$/;"	v
Shell001	nimbus.c	/^Widget	Shell001, SetupWindow;$/;"	v
Shell002	nimbus.c	/^Widget	Shell002, EditWindow;$/;"	v
Shell003	nimbus.c	/^Widget	Shell003, TimeSliceWindow;$/;"	v
Shell004	cb_defs.c	/^static Widget	Shell004, EditDefaultsWindow, defaultText[MAX_DEFAULTS];$/;"	v	file:
Shell005	cb_flight.c	/^static Widget		Shell005, FlightInfoWindow, flightText[nFlightInfo];$/;"	v	file:
SingleStageFilter	filter.c	/^static void SingleStageFilter($/;"	f	file:
SortTable	sort.c	/^void SortTable(char **table, int beg, int end)$/;"	f
Start2dSQL	psql.c	/^void Start2dSQL(RAWTBL *rp)$/;"	f
StartFlight	netcdf.c	/^static struct tm	StartFlight;$/;"	v	file:
StartProcessing	cb_main.c	/^void StartProcessing(Widget w, XtPointer client, XtPointer call)$/;"	f
Submit2dSQL	psql.c	/^void Submit2dSQL()$/;"	f
Sum	average.c	/^void Sum(NR_TYPE *in_data, NR_TYPE *out_data, int n)$/;"	f
SumSDI	average.c	/^void SumSDI(NR_TYPE *in_data, NR_TYPE *out_data, SDITBL *sp)$/;"	f
SumVector	average.c	/^void SumVector($/;"	f
SyncNetCDF	netcdf.c	/^void SyncNetCDF()$/;"	f
SynthData	globals.c	/^bool    SynthData=false;              \/\/bool value that tells wheter or not synthetic data is being used.$/;"	v
TAPE_DATA	adsIO.c	48;"	d	file:
TOKENS	rd_defs.c	35;"	d	file:
TenTo25	filter.c	/^static filterData	TwoFiftyTo25, FiftyTo25, OneTo25, FiveTo25, TenTo25,$/;"	v	file:
ThousandTo25	filter.c	/^			TwentyFive, ThousandTo25;$/;"	v	file:
TimeOffset	netcdf.c	/^static float		TimeOffset = 0.0;$/;"	v	file:
TimeSliceWindow	nimbus.c	/^Widget	Shell003, TimeSliceWindow;$/;"	v
ToggleOutput	cb_main.c	/^void ToggleOutput(Widget w, XtPointer client, XtPointer call)$/;"	f
ToggleProbe	cb_main.c	/^void ToggleProbe(Widget w, XtPointer client, XtPointer call)$/;"	f
ToggleRate	cb_main.c	/^void ToggleRate(Widget w, XtPointer client, XtPointer call)$/;"	f
TwentyFive	filter.c	/^			TwentyFive, ThousandTo25;$/;"	v	file:
TwoFiftyTo25	filter.c	/^static filterData	TwoFiftyTo25, FiftyTo25, OneTo25, FiveTo25, TenTo25,$/;"	v	file:
UpdateTime	timeseg.c	/^void UpdateTime(NR_TYPE *record)$/;"	f
UserBtim	timeseg.c	/^		UserBtim[MAX_TIME_SLICES*4],$/;"	v	file:
UserEtim	timeseg.c	/^		UserEtim[MAX_TIME_SLICES*4];$/;"	v	file:
ValidateOutputFile	cb_main.c	/^void ValidateOutputFile(Widget w, XtPointer client, XtPointer call)$/;"	f
ValidateTime	cb_time.c	/^void ValidateTime(Widget w, XtPointer client, XtPointer call)$/;"	f
VariableType	cb_edit.c	/^static int	VariableType, ListPosition;$/;"	v	file:
VecLen	hdr_decode.c	/^	int	VecLen;	\/* VectorLength					*\/$/;"	m	struct:	file:
VerifyDefault	cb_defs.c	/^static void VerifyDefault(Widget w, int indx, XtPointer call)$/;"	f	file:
VerifyFlightInfo	cb_flight.c	/^static void VerifyFlightInfo(Widget w, int indx, XtPointer call)$/;"	f	file:
VerifyLagText	cb_edit.c	/^void VerifyLagText(Widget w, XtPointer client, XmTextVerifyCallbackStruct *call)$/;"	f
Write2dSQL	psql.c	/^void Write2dSQL(RAWTBL *rp, long time, long msec, ulong *p, int nSlices)$/;"	f
WriteAsyncData	async.c	/^void WriteAsyncData(char record[])$/;"	f
WriteMissingRecords	netcdf.c	/^static void WriteMissingRecords()$/;"	f	file:
WriteNetCDF	netcdf.c	/^void WriteNetCDF()$/;"	f
WriteNetCDF_MRF	netcdf.c	/^void WriteNetCDF_MRF()$/;"	f
WritePMS1DdataToSHMEM	pms1d_rt.c	/^void WritePMS1DdataToSHMEM(NR_TYPE data[])$/;"	f
WriteSQL	psql.c	/^void WriteSQL(char timeStamp[])$/;"	f
aDSdataText	Xwin.c	/^Widget	aDSdataText, outputFileText;$/;"	v
actual	pms1d_rt.c	/^static RAWTBL	*actual[MAX1DPROBES];$/;"	v	file:
add_derived_names	hdr_decode.c	/^static void add_derived_names(char name[])$/;"	f	file:
add_file_to_DERTBL	hdr_decode.c	/^static void add_file_to_DERTBL(char filename[])$/;"	f	file:
add_file_to_RAWTBL	hdr_decode.c	/^static void add_file_to_RAWTBL(char filename[])$/;"	f	file:
add_name_to_DERTBL	hdr_decode.c	/^static DERTBL *add_name_to_DERTBL(char name[])$/;"	f	file:
add_name_to_RAWTBL	hdr_decode.c	/^static RAWTBL *add_name_to_RAWTBL(char name[])$/;"	f	file:
add_raw_names	hdr_decode.c	/^static void add_raw_names(char name[])$/;"	f	file:
adsFileName	adsIO.c	/^static char	*adsFileName;$/;"	v	file:
baseTimeID	netcdf.c	/^static int		baseTimeID;$/;"	v	file:
bits	globals.c	/^ushort	*bits;			\/* Realtime (winput) only.		*\/$/;"	v
brd_str	psql.c	/^static char	brd_str[30000];		\/\/ Broadcast string$/;"	v	file:
buffer	globals.c	/^char	buffer[4096];		\/* Generic, volatile string space	*\/$/;"	v
check1Hz	despike.c	/^static void check1Hz(int SRstart, int SampleRate, NR_TYPE SpikeSlope, int *counter)$/;"	f	file:
checkForProductionSetup	cb_main.c	/^static void checkForProductionSetup()$/;"	f	file:
checkVariable	despike.c	/^static void checkVariable(int SRstart, int SampleRate, NR_TYPE SpikeSlope, int *counter)$/;"	f	file:
check_cal_coes	hdr_decode.c	/^static int check_cal_coes(int order, float *coef)$/;"	f	file:
check_for_wrap	phase_shift.c	/^static void check_for_wrap(NR_TYPE points[])$/;"	f	file:
clearDependedByList	netcdf.c	/^static void clearDependedByList()$/;"	f	file:
cnt	hdr_decode.c	/^	int	cnt;	\/* Total # of these probes present.		*\/$/;"	m	struct:	file:
conc	pms1d_rt.c	/^static DERTBL	*conc[MAX1DPROBES];$/;"	v	file:
conn	psql.c	/^static PGconn	*conn;$/;"	v	file:
context	nimbus.c	/^XtAppContext context;$/;"	v
createMRFilter	filter.c	/^static mRFilterPtr createMRFilter(int L, int M, filterPtr filter, MOD *modvar)$/;"	f	file:
currentHz	filter.c	/^static int	PSCBindex, currentHz, HzDelay;$/;"	v	file:
currentLR	adsIO.c	/^static long	lrlen, lrppr, currentLR;$/;"	v	file:
currentTimeSegment	timeseg.c	/^static int	currentTimeSegment;$/;"	v	file:
dataQuality	dq.c	/^char *dataQuality[] = {$/;"	v
data_p	netcdf.c	/^static void		*data_p[MAX_SDI+MAX_RAW+MAX_DERIVE];$/;"	v	file:
dateProcessed	netcdf.c	/^char	dateProcessed[32];	\/\/ For export to psql.c$/;"	v
defaultQuality	hdr_decode.c	/^static char	*defaultQuality;$/;"	v	file:
defaultText	cb_defs.c	/^static Widget	Shell004, EditDefaultsWindow, defaultText[MAX_DEFAULTS];$/;"	v	file:
derived	globals.c	/^DERTBL	*derived[MAX_DERIVE];	\/* Alphabeticly sorted pointers		*\/$/;"	v
derivedlist	hdr_decode.c	/^static char	*derivedlist[MAX_DERIVE*2],	\/* DeriveNames file	*\/$/;"	v	file:
despike	despike.c	/^static NR_TYPE despike(NR_TYPE *points)$/;"	f	file:
displaySetupWindow	cb_main.c	/^static void displaySetupWindow()$/;"	f	file:
disposCircBuff	filter.c	/^static void disposCircBuff(circBuffPtr aCBPtr)$/;"	f	file:
disposMultiRateFilter	filter.c	/^static int disposMultiRateFilter(mRFilterPtr aMRFPtr)$/;"	f	file:
doubleCheck	depend.c	/^static void doubleCheck(DERTBL *dp)	\/* This function is recursive	*\/$/;"	f	file:
dp	cb_edit.c	/^static DERTBL	*dp;$/;"	v	file:
ev_text	Xwin.c	/^Widget	ev_text[16], slOpMenu,funcOpMenu;$/;"	v
fd	netcdf.c	/^static int		fd = -1;$/;"	v	file:
filterCounter	filter.c	/^static void filterCounter(SDITBL *sp)$/;"	f	file:
finishCPU	cb_main.c	/^static clock_t	startCPU, finishCPU;$/;"	v	file:
finishWALL	cb_main.c	/^static time_t	startWALL, finishWALL;$/;"	v	file:
flightInfo	cb_flight.c	/^struct flightInfo$/;"	s	file:
flightText	cb_flight.c	/^static Widget		Shell005, FlightInfoWindow, flightText[nFlightInfo];$/;"	v	file:
flush2dQueue	async.c	/^static void flush2dQueue(int indx, int syncTime)$/;"	f	file:
func	globals.c	/^char * func[19];$/;"	v
funcOpMenu	Xwin.c	/^Widget	ev_text[16], slOpMenu,funcOpMenu;$/;"	v
functions	globals.c	/^std::string functions[25];                   \/\/these are the functions that the synthetic data injector can modify$/;"	v
getBuff	filter.c	/^static NR_TYPE getBuff(int offset, circBuffPtr aCBPtr)$/;"	f	file:
getCellSizes	pms1d.c	/^static int getCellSizes(RAWTBL *rp, float cellSize[])$/;"	f	file:
goButton	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
highRateButton	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
hour	netcdf.c	/^	int		hour;$/;"	m	struct:missDat	file:
hr	globals.c	/^int hr,sec,mins;      \/\/ store the hours, minutes and seconds $/;"	v
infd	adsIO.c	/^static int	infd;$/;"	v	file:
initCLIMET	hdr_decode.c	/^static void initCLIMET(char vn[])$/;"	f	file:
initCircBuff	filter.c	/^static void initCircBuff(circBuffPtr aCBPtr)$/;"	f	file:
initGreyHouse	hdr_decode.c	/^static void initGreyHouse(char vn[])$/;"	f	file:
initGustCorrected	hdr_decode.c	/^static void initGustCorrected(char vn[])$/;"	f	file:
initHDR	hdr_decode.c	/^static void initHDR(char vn[])$/;"	f	file:
initHoneywell	hdr_decode.c	/^static void initHoneywell(char vn[])$/;"	f	file:
initLitton51	hdr_decode.c	/^static void initLitton51(char vn[])$/;"	f	file:
initMASP	hdr_decode.c	/^static void initMASP(char vn[])$/;"	f	file:
initMultiRateFilter	filter.c	/^static void initMultiRateFilter(mRFilterPtr aMRFPtr)$/;"	f	file:
initOphir3	hdr_decode.c	/^static void initOphir3(char vn[])$/;"	f	file:
initPMS1D	hdr_decode.c	/^static void initPMS1D(char vn[])$/;"	f	file:
initPMS1Dv2	hdr_decode.c	/^static void initPMS1Dv2(char vn[])$/;"	f	file:
initPMS1Dv3	hdr_decode.c	/^static void initPMS1Dv3(char vn[])$/;"	f	file:
initPMS2D	hdr_decode.c	/^static void initPMS2D(char vn[], int order)$/;"	f	file:
initPMS2Dhouse	hdr_decode.c	/^static void initPMS2Dhouse(char vn[])$/;"	f	file:
initRDMA	hdr_decode.c	/^static void initRDMA(char vn[])$/;"	f	file:
initSDI	hdr_decode.c	/^static void initSDI(char vn[])$/;"	f	file:
inputRec	filter.c	/^static NR_TYPE	*inputRec;$/;"	v	file:
interp_180_angle	phase_shift.c	/^static void interp_180_angle(NR_TYPE prev_point, NR_TYPE *next_point, int start, int rate, int gap_size, int remainder)$/;"	f	file:
interp_360_angle	phase_shift.c	/^static void interp_360_angle(NR_TYPE prev_point, NR_TYPE *next_point, int start, int rate, int gap_size, int remainder)$/;"	f	file:
interp_regular	phase_shift.c	/^interp_regular($/;"	f	file:
item_type	hdr_decode.c	/^static char	*item_type, location[NAMELEN];$/;"	v	file:
iterateMRFilter	filter.c	/^static int iterateMRFilter(mRFilterPtr thisMRF, NR_TYPE input, NR_TYPE *output)$/;"	f	file:
lagText	Xwin.c	/^Widget	lagText, spikeText,synthconstText;$/;"	v
length	hdr_decode.c	/^static long	start, rate, length;$/;"	v	file:
list1	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
list1lineFrmt	cb_main.c	/^static char	list1lineFrmt[] = "%-12s %c%c   %4d  %4d   %4d  %8.3f   %c";$/;"	v	file:
locateAsyncVar	async.c	/^static int locateAsyncVar(ushort record[])$/;"	f	file:
locatePMS	hdr_decode.c	/^static int locatePMS(char target[], PMS list[])$/;"	f	file:
location	hdr_decode.c	/^static char	*item_type, location[NAMELEN];$/;"	v	file:
logFileName	logfile.c	/^static char	logFileName[256];$/;"	v	file:
logText	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
lowRateButton	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
lrlen	adsIO.c	/^static long	lrlen, lrppr, currentLR;$/;"	v	file:
lrppr	adsIO.c	/^static long	lrlen, lrppr, currentLR;$/;"	v	file:
main	nimbus.c	/^main(int argc, char *argv[])$/;"	f
markDependedByList	netcdf.c	/^static void markDependedByList(char target[])$/;"	f	file:
menuBar	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
mid	sort.c	/^static char	*mid, *temp, **sort_table;$/;"	v	file:
mins	globals.c	/^int hr,sec,mins;      \/\/ store the hours, minutes and seconds $/;"	v
minute	netcdf.c	/^	int		minute;$/;"	m	struct:missDat	file:
missDat	netcdf.c	/^struct missDat	\/* (Time gap) \/ (missing data) information *\/$/;"	s	file:
missingRecords	netcdf.c	/^static Queue	*missingRecords;$/;"	v	file:
mrf_debug	filter.c	/^static int	mrf_debug = false;$/;"	v	file:
nDefaults	globals.c	/^int	nsdi, nraw, nderive, nDefaults;$/;"	v
nFlightInfo	cb_flight.c	48;"	d	file:
nFloats	globals.c	/^long	nFloats;	\/* Contains number of floats used in SampledData *\/$/;"	v
nProbes	probe.c	/^static int	nProbes = 0;$/;"	v	file:
nRecords	netcdf.c	/^	int		nRecords;$/;"	m	struct:missDat	file:
nSpikesRAW	despike.c	/^static int	nSpikesSDI[MAX_VARIABLES], nSpikesRAW[MAX_VARIABLES];$/;"	v	file:
nSpikesSDI	despike.c	/^static int	nSpikesSDI[MAX_VARIABLES], nSpikesRAW[MAX_VARIABLES];$/;"	v	file:
nTimeIntervals	timeseg.c	/^static int	nTimeIntervals;$/;"	v	file:
name	despike.c	/^static char	*name;$/;"	v	file:
name	hdr_decode.c	/^	char	*name;$/;"	m	struct:	file:
ncid	async.c	/^static int ncid, recDim;$/;"	v	file:
nderive	globals.c	/^int	nsdi, nraw, nderive, nDefaults;$/;"	v
newCircBuff	filter.c	/^static circBuffPtr newCircBuff(int size)$/;"	f	file:
next2_rec	despike.c	/^static NR_TYPE	*prev_rec, *this_rec, *next_rec, *prev2_rec, *next2_rec;$/;"	v	file:
next_next_rec	phase_shift.c	/^		*next_rec, *next_next_rec;$/;"	v	file:
next_rec	despike.c	/^static NR_TYPE	*prev_rec, *this_rec, *next_rec, *prev2_rec, *next2_rec;$/;"	v	file:
next_rec	phase_shift.c	/^		*next_rec, *next_next_rec;$/;"	v	file:
nraw	globals.c	/^int	nsdi, nraw, nderive, nDefaults;$/;"	v
nraw_ps	phase_shift.c	/^static int	nsdi_ps = 0, nraw_ps = 0;$/;"	v	file:
nraw_spike	despike.c	/^static int	nsdi_spike = 0, nraw_spike = 0;$/;"	v	file:
nsdi	globals.c	/^int	nsdi, nraw, nderive, nDefaults;$/;"	v
nsdi_ps	phase_shift.c	/^static int	nsdi_ps = 0, nraw_ps = 0;$/;"	v	file:
nsdi_spike	despike.c	/^static int	nsdi_spike = 0, nraw_spike = 0;$/;"	v	file:
originalValue	cb_flight.c	/^	char	originalValue[10];$/;"	m	struct:flightInfo	file:
out_rec	phase_shift.c	/^		*this_rec, *out_rec,$/;"	v	file:
outputFileText	Xwin.c	/^Widget	aDSdataText, outputFileText;$/;"	v
outputHRbutton	Xwin.c	/^Widget	outputLRbutton, outputSRbutton, outputHRbutton;$/;"	v
outputLRbutton	Xwin.c	/^Widget	outputLRbutton, outputSRbutton, outputHRbutton;$/;"	v
outputSRbutton	Xwin.c	/^Widget	outputLRbutton, outputSRbutton, outputHRbutton;$/;"	v
outputVarNo	Xwin.c	/^Widget	outputVarYes, outputVarNo;$/;"	v
outputVarYes	Xwin.c	/^Widget	outputVarYes, outputVarNo;$/;"	v
pType	hdr_decode.c	/^	int	pType;	\/* probeType for 'ToggleProbe' menu, redundant	*\/$/;"	m	struct:	file:
pcnt	pms1d_rt.c	/^static int	pcnt = 0;$/;"	v	file:
phys_rec	adsIO.c	/^static char	phys_rec[MX_PHYS] = "";$/;"	v	file:
pms1_probes	hdr_decode.c	/^static PMS	pms1_probes[] =$/;"	v	file:
pms1v2_probes	hdr_decode.c	/^static PMS	pms1v2_probes[] =$/;"	v	file:
pms1v3_probes	hdr_decode.c	/^static PMS	pms1v3_probes[] =$/;"	v	file:
pms2d_probes	hdr_decode.c	/^static PMS	pms2d_probes[] =$/;"	v	file:
polyinterp	despike.c	/^static NR_TYPE polyinterp(NR_TYPE xa[], NR_TYPE ya[], int n, int x)$/;"	f	file:
prev2_rec	despike.c	/^static NR_TYPE	*prev_rec, *this_rec, *next_rec, *prev2_rec, *next2_rec;$/;"	v	file:
prevTime	timeseg.c	/^static long	prevTime,$/;"	v	file:
prev_prev_rec	phase_shift.c	/^static NR_TYPE	*prev_prev_rec, *prev_rec,$/;"	v	file:
prev_rec	despike.c	/^static NR_TYPE	*prev_rec, *this_rec, *next_rec, *prev2_rec, *next2_rec;$/;"	v	file:
prev_rec	phase_shift.c	/^static NR_TYPE	*prev_prev_rec, *prev_rec,$/;"	v	file:
printDependedByList	netcdf.c	/^static void printDependedByList()$/;"	f	file:
probeCnt	hdr_decode.c	/^static int	probeCnt, probeType;$/;"	v	file:
probeNames	probe.c	/^static char	*probeNames[MAX_PROBES];$/;"	v	file:
probeType	hdr_decode.c	/^static int	probeCnt, probeType;$/;"	v	file:
probeTypes	probe.c	/^static int	probeTypes[MAX_PROBES];$/;"	v	file:
probe_name	pms1d_rt.c	/^static char	*probe_name[MAX1DPROBES];$/;"	v	file:
probe_type	pms1d_rt.c	/^static int	probe_type[MAX1DPROBES];	\/* Used for switch case	*\/$/;"	v	file:
process_line	rd_defs.c	/^static void process_line(char *line_p, FILE *fp)$/;"	f	file:
pullRight	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
putBuff	filter.c	/^static void putBuff(NR_TYPE datum, circBuffPtr aCBPtr)$/;"	f	file:
range	pms1d_rt.c	/^static RAWTBL	*range[MAX1DPROBES];		\/* FSSP only		*\/$/;"	v	file:
rate	hdr_decode.c	/^static long	start, rate, length;$/;"	v	file:
raw	globals.c	/^RAWTBL	*raw[MAX_RAW];		\/* Alphabeticly sorted pointers		*\/$/;"	v
rawFilters	filter.c	/^static mRFilterPtr	sdiFilters[MAX_SDI], rawFilters[MAX_RAW];$/;"	v	file:
raw_ps	phase_shift.c	/^static RAWTBL	*raw_ps[MAX_VARIABLES];$/;"	v	file:
raw_spike	despike.c	/^static RAWTBL	*raw_spike[MAX_VARIABLES];$/;"	v	file:
rawlist	hdr_decode.c	/^		*rawlist[MAX_RAW*2];		\/* RawNames file	*\/$/;"	v	file:
readAfilter	filter.c	/^static void readAfilter(char *file, filterPtr daFilt)$/;"	f	file:
readFilters	filter.c	/^static void readFilters()$/;"	f	file:
readHeader	cb_main.c	/^static void readHeader()$/;"	f	file:
readHeaderButton	Xwin.c	/^Widget	readHeaderButton;$/;"	v
recDim	async.c	/^static int ncid, recDim;$/;"	v	file:
recordNumber	netcdf.c	/^static long		recordNumber = 0;$/;"	v	file:
rp	cb_edit.c	/^static RAWTBL	*rp;$/;"	v	file:
sMarkDirty	cb_flight.c	/^static void sMarkDirty(Widget w, int indx, XtPointer call)$/;"	f	file:
sd	globals.c	/^SyntheticData sd;$/;"	v
sdi	globals.c	/^SDITBL  *sdi[MAX_SDI];		\/* SDI (aka raw) variable list		*\/$/;"	v
sdiFilters	filter.c	/^static mRFilterPtr	sdiFilters[MAX_SDI], rawFilters[MAX_RAW];$/;"	v	file:
sdi_ps	phase_shift.c	/^static SDITBL	*sdi_ps[MAX_VARIABLES];$/;"	v	file:
sdi_spike	despike.c	/^static SDITBL	*sdi_spike[MAX_VARIABLES];$/;"	v	file:
sec	globals.c	/^int hr,sec,mins;      \/\/ store the hours, minutes and seconds $/;"	v
second	netcdf.c	/^	int		second;$/;"	m	struct:missDat	file:
serialNums	pms1d_rt.c	/^static char	*serialNums[MAX1DPROBES];$/;"	v	file:
setOutputFileName	cb_main.c	/^static void setOutputFileName()$/;"	f	file:
setTimeDelay	filter.c	/^static void setTimeDelay(int rate, int *sec, int *msec)$/;"	f	file:
set_defaultText	cb_defs.c	/^static void set_defaultText(int indx)$/;"	f	file:
set_edit_window_data	cb_edit.c	/^static void set_edit_window_data($/;"	f	file:
shift	phase_shift.c	/^static void shift($/;"	f	file:
shift_1hz	phase_shift.c	/^static void shift_1hz(int start, int lag)$/;"	f	file:
sighandler	cb_main.c	/^void sighandler(int s)$/;"	f
slOpMenu	Xwin.c	/^Widget	ev_text[16], slOpMenu,funcOpMenu;$/;"	v
sort_table	sort.c	/^static char	*mid, *temp, **sort_table;$/;"	v	file:
sort_the_table	sort.c	/^static void sort_the_table(int beg, int end)$/;"	f	file:
sp	cb_edit.c	/^static SDITBL	*sp;$/;"	v	file:
spikeText	Xwin.c	/^Widget	lagText, spikeText,synthconstText;$/;"	v
sql2d_str	psql.c	/^static char	sql2d_str[50000];	\/\/ 2D SQL string$/;"	v	file:
sql_str	psql.c	/^static char	sql_str[30000];		\/\/ SQL string$/;"	v	file:
start	hdr_decode.c	/^static long	start, rate, length;$/;"	v	file:
startCPU	cb_main.c	/^static clock_t	startCPU, finishCPU;$/;"	v	file:
startWALL	cb_main.c	/^static time_t	startWALL, finishWALL;$/;"	v	file:
stopProcessing	cb_main.c	/^void stopProcessing()$/;"	f
suffix	amlibfn.c	/^static char	*suffix;$/;"	v	file:
synthconstText	Xwin.c	/^Widget	lagText, spikeText,synthconstText;$/;"	v
synthdata	slrloop.c	/^bool synthdata=false;$/;"	v
temp	sort.c	/^static char	*mid, *temp, **sort_table;$/;"	v	file:
temptime	globals.c	/^float temptime;           \/\/temporary time  holder$/;"	v
this_rec	despike.c	/^static NR_TYPE	*prev_rec, *this_rec, *next_rec, *prev2_rec, *next2_rec;$/;"	v	file:
this_rec	phase_shift.c	/^		*this_rec, *out_rec,$/;"	v	file:
timeDisplayText	Xwin.c	/^Widget	menuBar, timeDisplayText, list1, goButton, logText, pullRight,lowRateButton, highRateButton;$/;"	v
timeIndex	timeseg.c	/^int	timeIndex[3];$/;"	v
timeOffsetID	netcdf.c	/^static int	timeOffsetID;$/;"	v	file:
timeindex	globals.c	/^int timeindex[3]; \/\/ array of time$/;"	v
ts_text	cb_time.c	/^Widget	ts_text[MAX_TIME_SLICES*2];$/;"	v
twoDcnt	hdr_decode.c	/^static int	InertialSystemCount, GPScount, twoDcnt, NephCnt;$/;"	v	file:
twoDfd	adsIO.c	/^static int	twoDfd[] = { -1, -1, -1, -1, -1, -1 };$/;"	v	file:
twoDfile	adsIO.c	/^static char	twoDfile[1024];$/;"	v	file:
type	hdr_decode.c	/^	int	type;	\/* #defines used for switch's, in WINDS		*\/$/;"	m	struct:	file:
validateInputFile	cb_main.c	/^static int validateInputFile()$/;"	f	file:
varNameLabel	Xwin.c	/^Widget	varNameLabel;$/;"	v
volts	globals.c	/^NR_TYPE	*volts;			\/* Realtime (winput) only.		*\/$/;"	v
writeBlank	netcdf.c	/^static int writeBlank(int varid, long start[], long count[], int OutputRate)$/;"	f	file:
writeColumn	netcdf.c	/^void writeColumn()$/;"	f
