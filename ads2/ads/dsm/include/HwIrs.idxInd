/* Irs.h
 
   Honeywell YG1854 IRS interface class.

   Original Author: Jerry V. Pelk
   Copyright by the National Center for Atmospheric Research
 
   Revisions:

*/

#ifndef HWIRS_H
#define HWIRS_H

#include <Bc635Vme.h>
#include <DsmConfig.h>
#include <DsmMessage.h>
#include <IP429.h>

#include <arinc429.h>
#include <dsmctl.h>
#include <header.h>

#define HW_TASALT_LEN		3		// length of tas_alt array
#define HW_TAS_IDX		0		// tas word index
#define HW_ALT_IDX		1		// altitude word index
#define HW_ALT_RATE_IDX		2		// altitude rate word index

#define HW_TAS_ALT_GAP		41		// gap time value for ~20 hz

class HwIrs {
public:
  HwIrs (IP429*, Bc635Vme&, int rxchan, int txchan);
  char* buffer () {return (char*)&irs_blk[gtog];} // get last sec buffer
  void secondAlign ();			// one second alignment
  void setTasAlt(float tas, float alt); // build arinc 429 tas_alt words
  void readIsr ();     			// sampling isr
  void sendTasAlt() 		// send current tas_alt data
           {ip429->write429 (tx_chan, tas_alt, HW_TASALT_LEN, HW_TAS_ALT_GAP);}

  int drift() 		{return cur_drift;}
  int groundSpeed()	{return cur_gnd_speed;}
  int inertialAlt() 	{return cur_inertial_alt;}
  int latitude() 	{return cur_lat;}
  int longitude() 	{return cur_lon;}
  int pitch() 		{return cur_pitch;}
  int roll() 		{return cur_roll;}
  int trueHeading() 	{return cur_true_heading;}
 
private:
  void togglePut();			// toggle put buffer
  IP429 *ip429;				// arinc interface class
  Bc635Vme &tfp;                       	// time-freq processor class

  Irs_blk irs_blk[TOG];			// data buffers
  int gtog;				// get buffer index
  int ptog;				// put buffer index

  int newSecond;			// start new second flag
  int rx_chan;				// receive arinc channel
  int tx_chan;				// transmit arinc channel
  int tas_alt[HW_TASALT_LEN];		// tas, alt, and alt rate words
  float last_alt;			// last altitude value

  int idx_integ_vert_accel;		// 50 hz parameters index
  int idx_pitch_angle;			// 50 hz parameters index
  int idx_roll_angle;			// 50 hz parameters index
  int idx_pitch_rate;			// 50 hz parameters index
  int idx_roll_rate;			// 50 hz parameters index
  int idx_yaw_rate;			// 50 hz parameters index
  int idx_long_accel;			// 50 hz parameters index
  int idx_lat_accel;			// 50 hz parameters index
  int idx_normal_accel;			// 50 hz parameters index
  int idx_pitch_att_rate;		// 50 hz parameters index
  int idx_roll_att_rate;		// 50 hz parameters index
  int idx_pot_vert_speed;		// 50 hz parameters index
  int idx_vertical_accel;		// 50 hz parameters index
  int idx_track_ang_rate;		// 50 hz parameters index
  int idx_inrt_vert_speed;		// 25 hz parameters index
  int idx_true_heading;			// 25 hz parameters index
  int idx_inertial_alt;			// 25 hz parameters index
  int idx_track_angle_true;		// 25 hz parameters index
  int idx_drift_angle;			// 25 hz parameters index
  int idx_ground_speed;			// 10 hz parameters index
  int idx_wind_speed;			// 10 hz parameters index
  int idx_wind_dir_true;		// 10 hz parameters index
  int idx_platform_hdg;			// 10 hz parameters index
  int idx_velocity_ns;			// 10 hz parameters index
  int idx_velocity_ew;			// 10 hz parameters index
  int idx_present_lat;			// 5 hz parameters index
  int idx_present_lon;			// 5 hz parameters index
  int idx_norm_accel;			// 5 hz parameters index
  int idx_irs_maint_discretes;		// 2 hz parameters index
  int idx_irs_discretes;		// 2 hz parameters index
  int idx_time_to_nav_ready;		// 2 hz parameters index
  int idx_equipment_id;			// 2 hz parameters index

  int cur_drift;			// current arinc ground speed word
  int cur_gnd_speed;			// current arinc ground speed word
  int cur_inertial_alt;			// current arinc inertial altitude word
  int cur_lat;				// current arinc latitude word
  int cur_lon;				// current arinc longitude word
  int cur_pitch;			// current arinc pitch word
  int cur_roll;				// current arinc roll word
  int cur_true_heading;			// current arinc true heading word
};

#endif
