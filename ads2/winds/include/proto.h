/* Added by Chris.
 */

#include "header.h"
#include "constants.h"
#include <xview/xview.h>
#include <xview/cms.h>
#include <xview/canvas.h>
#include <xview/panel.h>

/* chost.c */
extern int SetComputeHost(void);
extern char *GetComputeHost(void);
/* date.c */
extern int init_date(void);
extern char *get_month(void);
extern int GetMonthNum(char *month);
extern int get_month_num(void);
extern char *get_day(void);
extern char *get_year(void);
extern char *GetTime(void);
extern char *get_date(void);
extern char *GetYYMMDDfromBase(long basetime);
extern char *get_date_from_base(long base);
extern char *get_time_from_base(long base);
extern int GetTimeIntFromHMS(int hr, int min, int sec);
extern int GetTimeIntFromBase(long base);
extern int GetBaseFromMDYHMS(int month, int day, int year, int hr, int min, int sec);
extern int hms2sec(int hr, int minut, int sec);
extern int sec2hms(int total, int *hr, int *minut, int *sec);
extern int next_end_period(int total, int interval);
extern int last_start_period(int total, int rate, int interval);
/* getmem.c */
extern void *GetMemory(size_t nbytes);
/* strupr.c */
extern char *strupr(char s[]);
extern char *strlower(char s[]);
/* util.c */
extern char *ResizeMem(void *memptr, int size);
extern char *substring(char *s, int c);
extern int nindex(char *s, int c);
extern char *ReplaceStringWithChar(char *string, char *target, int substitute);
extern int GetNumCharInString(int c, char *s);
extern char *ReplaceChar(char *string, int target, int substitute);
extern char *StripLeadingBlanks(char *s);
extern char *TrimTrailingBlanks(char *s);
extern int last_blank(char *s, int maxlen);
extern int trim_trailing_blanks(char *s, int len);
extern int concatenate_(char *s1, char *s2);
extern int null_terminate_(char *s, int *pos);
extern int trim_trailing_digits(char *s, int precision, int retain_decimal);
extern int SetAlarmTimer(int usecs);
extern int SetCurrentDir(char *dir);
extern char *GetCurrentDir(void);
extern char *GetUnixCleanFilename(char *string);
extern int trim_trailing_zeros(char *s);
extern FILE *WINDSfopen(char filename[], char mode[]);
extern int WINDSfclose(FILE *filehandle);
extern char *GetNextRecord(int length, FILE *handle, int truncate);
extern int WINDSShowFiles(void);
extern char *GetCoreSignalName(int sig);
extern char *GetExitSignalName(int sig);
extern int GetNumberExitSignals(void);
extern int GetNumberCoreSignals(void);
extern int GetCoreSignal(int signal);
extern int GetExitSignal(int signal);
extern int FileExists(char *filename);
extern int FileSize(char *filename);
extern int FileIsSymLink(char *filename);
extern int TimeOfLastUpdate(char *filename);
extern int TimeSinceLastUpdate(char *filename);
extern int SwapSpaceLeft(void);
extern int DiskSpaceLeft(char *filesystem);
extern int CreateOrTouchFile(char *filename);
extern int CreateFile(char *filename);
extern int TouchFile(char *filename);
extern int SetThreshold(int threshold);
extern int GetThreshold(void);
extern int SaveIfLarger(char *filename);
extern char *ListFilesLargerThan(int threshold, char *directory);
extern char *GetHostName(void);
extern int LogToStdErr(char *msg);
extern char *GetTimeStamp(void);
extern char **GetDirectoryNames(char *parentdir);
extern int FindFiles(char *filename, char *directory, int (*opfunc)(char *), void (*errorfunc)(char *), int lengthcmp);
extern int IsDirectory(char *pathname);
extern char *GetFileDate(char *filename);
extern int ExecuteShellCommand(char *command);
extern char *GetShellOutput(char *command, void (*reportfunc)(char *));
extern void LogMsgToStdErr(char *msg);
extern void LogMsgToStdOut(char *msg);
extern void LogMsgToConsole(char *host, char *source, char *message);
extern char *GetFileType(char *filename);
extern char *GetCoreType(char *filename);
extern char *ShowWINDSStack(char *filename);
extern int MoveFile(char *source, char *dest);
extern int MountingFromNFSServer(char *server);
extern int ListLimits(void);
extern int LeftJustify(char *string, char *target, int fieldlen);
extern int PadWithBlanks(char *string, int length);
extern int GetStringPosition(void);
extern int SetStringPosition(int posn);
extern char *GetNextString(int *posn, char *record);
extern char *GetNextToken(int *posn, char *record, char *delimiter);
extern int StringInList(char *string, char *list[], int numlistwords);
extern int StringInString(char *s1, char *s2, int caps);
extern int StringCompare(char *s1, char *s2);
extern int StringLength(char *string);
extern char *TruncateString(char *s1, char *s2);

/* adscmd.c */
extern void set_adsevt_proc(Panel_item item, int value, Event *event);
/* asciifeed.c */
extern void	GetAsciiParmsFromFile(char filename[]);
extern int	GetNumAsciiParms(void);
extern void	SetAsciiFlag(char filename[]);
extern int	AsciiData(void);
extern void	SendAsciiData(int point, int hh, int mm, int ss);
/* axes.c */
extern double time_mults[];
extern double acceptable_decimal_interval(double x);
extern double acceptable_hex_interval(double x);
extern double acceptable_octal_interval(double x);
extern double acceptable_time_interval(double x);
extern double acceptable_interval(double x, int mode);
extern double acceptable_midpt(double value, double intrvl);
extern int get_rnglbls(int quadrant, int trace);
/* boundaries.c */
extern int init_boundary_data(char boundary_filename[]);
extern int ChangeLines(int numvalues);
extern int refresh_boundaries(int quadrant);
extern int draw_boundaries(int quadrant);
/* calib.c */
extern Panel dialogue;
extern Panel_item var_name;
extern Panel_item xminimum;
extern Panel_item xmaximum;
extern Panel_item var_units;
extern Panel_item sensor_type;
extern Panel_item sensor_sn;
extern Panel_item cond_sn;
extern Panel_item amp_gain;
extern Panel_item off_set;
extern Panel_item amp_cutoff;
extern Panel_item ads_addr;
extern Panel_item tech;
extern Panel_item set_pt;
extern Panel_item num_sx;
extern Menu calib_menu;
extern int menu_selected;
extern int init_calib_parms(void);
extern void redraw_calib(Canvas cvas, Xv_Window pwindow, Rectlist *area);
extern int ResizeCalibWindows(void);
extern int make_calib_windows(void);
extern int GetCalibWindowsMade(void);
extern int show_calib(void);
extern int HideCalibDisplay(void);
extern int refresh_calib(void);
extern int init_plots(void);
extern int make_calib_items(void);
/* calib_events.c */
extern int need_calib_attr;
extern int data_indx;
extern char varname[13];
extern float set_point;
extern char set_pt_string[64];
extern int num_sex;
extern char num_sex_string[64];
extern struct hist *current;
extern char new_units[12];
extern float bottom;
extern float top;
extern int set_set_point(void);
extern Panel_setting get_input_func(Panel_item item, Event *event);
extern void calib_proc(Event *event);
extern int InstallCalibSelection(int index);
extern int SetCalibTrace(int index);
extern int update_setpt(double value);
/* config.c */
extern int get_num_display_types(void);
extern int get_config(void);
/* config_mgmt.c */
extern FILE *config_file;
extern int open_config_file(void);
extern int get_config_parm(int parm);
/* ctl_panel.c */
extern int get_bkgnd_color(void);
extern int set_bkgnd_color(char *color);
extern int recycle(void);
extern int CheckForTimeToClearMessage(void);
extern int SetTimeToClearMessage(int seconds);
extern Panel_item adsevt_item(void);
extern int input_acknowledge(int notifyuser);
extern int wait_for_shmem_refill(void);
extern int display_request(int which, char *message);
extern int send_input_info(int which, int value, char *message, int waitforinput);
extern int GetParcelTrackingEnabled(void);
extern int SetParcelTrackingEnabled(int enabled);
extern int get_current_parcel(void);
extern int set_current_parcel(int value);
extern int ShowControlPanel(int which);
extern int show_ops(int which);
extern int set_adscmd_button(int value);
extern int set_intrvl_button(void);
extern int SetControlButtonInactive(int which, int value);
extern int SetControlButtonValue(int which, int value);
extern int set_freeze_button(int value);
extern int reset_rate_button(void);
extern int set_update_rate(int value);
extern int get_update_rate_button_value(void);
extern int get_update_rate(void);
extern int set_update_interval(int value);
extern int get_update_interval(void);
extern int set_input_frozen(int value);
extern int get_input_frozen(void);
extern int set_broadcast(int value);
extern int get_broadcast(void);
extern Panel_setting chg_update_interval(Panel_item item, Event *event);
extern int ctl_varop_proc(Panel_item item, int value, Event *event);
extern int init_parcel(Panel_item item, int value, Event *event);
extern int show_parcel(Panel_item item, int value, Event *event);
extern int chg_update_rate(Panel_item item, int value);
extern int MakeUpdateRateChoices(void);
extern int change_update_rate(int rate);
extern int FrameForward(void);
extern int chg_subset(Panel_item item, int value, Event *event);
extern int reset_geom(Panel_item item, int value, Event *event);
extern int invert_bkgnd_color(Panel_item item, int value, Event *event);
extern int set_printing_attrs(Panel_item item, int value, Event *event);
extern int ShowPrintConfigMenu(Panel_item item, int value, Event *event);
extern int ShowFoldersMenu(Panel_item item, int value, Event *event);
extern int ShowPlotspexMenu(Panel_item item, int value, Event *event);
extern int chg_attributes(Panel_item item, int value, Event *event);
extern int chg_number_base(Panel_item item, int value, Event *event);
extern int ShowCalibDisplay(void);
extern int ShowNormalDisplay(void);
extern int ShowStatisticsMenu(Panel_item item, int value, Event *event);
extern int SetStatsButtonValue(int value);
extern Panel_setting ChgStartTime(Panel_item item, int value, Event *event);
extern int FrameJump(Panel_item item, int value, Event *event);
extern int ChgTimeFrame(int value);
extern int ResetInputProc(void);
extern int broadcast_proc(Panel_item item, int value);
extern int freeze_proc(Panel_item item, int value, Event *event);
extern int quit_proc(Panel_item item, int value, Event *event);
extern int calibops_proc(Panel_item item, int value, Event *event);
extern int SelectPrintSetup(Panel_item item, int value, Event *event);
extern int SelectPrintTime(Panel_item item, int value, Event *event);
extern int CancelMultiPrint(Panel_item item, int value, Event *event);
extern int ActivateControlPanel(int active);
extern int ExecuteMultiPrint(Panel_item item, int value, Event *event);
extern int SetControlPanelDims(void);
extern int RefreshControlPanel(void);
extern int ResizeControlPanel(void);
extern int MakeControlPanel(void);
extern int ToggleCalibAccess(void);
extern int ToggleExpertAccess(void);
extern int MakeControlButtons(void);
/* display.c */
extern int (*FlushDisplay[3])();
extern int (*InitDraw[3])();
extern int (*InitMemDraw[3])();
extern int (*SetHiliteColors[3])();
extern int (*SetContext[3])();
extern int (*SetClipping[3])();
extern int (*UnsetClipping[3])();
extern int (*GetYOffset[3])();
extern int (*GetXOffset[3])();
extern int (*SetOffset[3])();
extern int (*FillArea[3])();
extern int (*ContextDrawLine[3])();
extern int (*DrawFilledPolygon[3])();
extern int (*DrawCircle[3])();
extern int (*DrawLine[3])();
extern int (*LimitCoords[3])();
extern int (*DrawDashLine[3])();
extern int (*ContextDrawPolyline[3])();
extern int (*DrawPolyline[3])();
extern int (*DrawPolypoint[3])();
extern int (*RasterOp[3])();
extern int (*MonoRasterOp[3])();
extern int (*DestroyImage[3])();
extern int (*GetImage[3])();
extern int (*DrawText[3])();
extern int (*DrawTtext[3])();
extern int (*GetColorMap[3])();
extern int (*SetColorMap[3])();
extern int (*SetupColors[3])();
extern int (*display_func[8])();
extern double indep_scale[5];
extern double dep_scale[5][4];
extern Server_image mem_image[4];
extern int got_start_time[5];
extern int start_point[5];
extern int inversed_row[4];
extern int SetPointsDrawMode(int quadrant, int allpoints);
extern int GetDrawType(void);
extern int SetDrawType(int type);
extern int init_display_parms(int quadrant);
extern int SetLastDrawEnd(int quadrant, int value);
extern int GetNextDrawStart(int quadrant);
extern int SetNextDrawStart(int quadrant, int value);
extern int clear_plot_frame(int quadrant);
extern int update_voltage(int quadrant);
extern int init_calib_curve(void);
extern int calib_curve(double set_point);
extern int fitted_curve(int quadrant, double c0, double c1, double c2);
extern int draw_scatter(int quadrant, double set_point, int start, int numpts);
extern int draw_x(int quadrant, int xcoord, int ycoord, int drawcolor, int op, int length);
extern int xy(int quadrant);
extern int skew_t(int quadrant);
extern int draw_xy_trace(int quadrant, int start, int numpts, int start_trace, int end_trace);
extern int set_isolate_clipping(int quadrant, int trace);
extern int flash_current_point(int quadrant, int trace);
extern int draw_flash(int quadrant, int trace, int xcoord, int ycoord, int flash_color);
extern int set_boundary_context(int quadrant, int memory_image);
extern int set_landmark_context(int quadrant, int op, int fg, int bg);
extern int get_x_coord(int quadrant, double value);
extern int get_y_coord(int quadrant, int trace, double value);
extern int time_series(int quadrant);
extern int draw_time_series_trace(int quadrant, int start, int numpts, int start_trace, int end_trace);
extern int set_mode(int quadrant);
extern int more_points(int quadrant);
extern int shift_plots_left(int quadrant, int numpts);
extern double get_raw_value(char *variable, int start_block);
extern double get_derived_value(char *variable, int start_block);
extern int get_mode_by_name(char *varname);
extern int clip_vector(int xmin, int xmax, int ymin, int ymax, int ox1, int oy1, int ox2, int oy2, int *x1, int *y_1, int *x2, int *y2);
extern int rehilite(int quadrant);
/* errors.c */
extern char error_info[18*80];
extern int alert_up;
extern int exit_session;
extern int system_shutdown;
extern char errmsg[1024];
extern int notify_user_error(int condition);
extern int RequestAlertNow(char *string);
extern int NotifyUserAndOrLog(char *message, int exitstatus);
extern int set_notice_needed(int which);
extern int get_notice_needed(void);
extern int RequestAlertWhenSafe(char *msg);
/* etc.c */
extern int dep_ptr[5][24];
extern int repaint_set[5];
extern int indep_ptr[5];
extern int color[5][4];
extern int first_point[5];
extern int dep_mode[5][24];
extern char trace_name[5][4][13];
extern int indep_mode[5];
extern char *GetTraceName(int quadrant, int which);
extern int GetDepVarMode(int quadrant, int which);
extern void CanvasRepaintProc(Canvas cvas, Xv_Window pwindow, Rectlist *area);
extern int refresh_window(int mode, int quadrant);
extern int GetMaxNameLength(void);
extern int SetMaxNameLength(void);
extern int indices(int quadrant, char *varname);
extern int get_mode(int *indx);
extern int set_trace(int quadrant, int index);
extern int set_listee(int quadrant, int indx);
extern int set_fixee(int quadrant, int indx);
extern int unset_trace(int quadrant);
extern int GetTraceColor(int quadrant, int trace);
extern int allocate_color(int quadrant);
extern int set_cursor_tracking(int quadrant);
extern int unset_cursor_tracking(int quadrant);
extern int report(int quadrant, char *string);
extern int time_to_log(void);
extern int init_hdr_types(void);
extern int WaitOnVariableLists(void);
extern int WaitOnRawList(int waittime);
extern int WaitOnDerivedList(int waittime);
/* event_ops.c */
extern struct statistics stats;
extern int hex;
extern int frozen[5];
extern int list_printing[5];
extern int num_clix[5];
extern int pending_op[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern int highlighted_trace[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern int need_rehilite[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern char *labels[32];
extern int SetNeedRehilite(int quadrant, int need);
extern int BaseIsHex(void);
extern int init_hilite_parms(int quadrant);
extern int init_status_parms(int quadrant);
extern int freeze(int quadrant);
extern int toggle_print_lists(int quadrant);
extern int set_ctl_frame_label(int area);
extern int toggle_stats_printing(void);
extern int highlight_area(int force_help_update, int quadrant, int x, int y);
extern int get_current_area(void);
extern char *GetHilitedVarName(void);
extern int SetHilitedVarName(char *name);
extern int set_current_area(int quadrant, int x, int y);
extern int get_current_pms1d_area(int quadrant, int y);
extern int update_area_vars(int quadrant, int area, int trace, int op);
extern int clear_all_hilited(int quadrant);
extern int xyplot_msmiddle(int quadrant, Event *event, int x, int y);
extern int xyplot_msright(int quadrant, Event *event, int x, int y);
extern void StartupClixTimer(Notify_client client);
extern void StopClixTimer(Notify_client client);
extern void RecycleClixTimer(Notify_client client);
extern int zoom_click(Event *event);
extern int zoom_in(int op, int quadrant, Window window);
extern int zoom_out(int op, int quadrant, Window window);
extern Notify_value count_clix(Notify_client client, int which);
/* events.c */
extern char *targets[32];
extern int current_quadrant;
extern int cursor_in_control_panel;
extern int cursor_in_ctl_panel;
extern int cursor_in_op_panel;
extern int cursor_in_setup_panel;
extern int cursor_in_menu_panel;
extern int cursor_in_panel_menu;
extern int unset_current_panel;
extern int hilite_debug;
extern int last_event;
extern int last_window;
extern int SetMouseWindow(Xv_Window window);
extern Xv_Window GetMouseWindow(void);
extern int GetMouseX(void);
extern int GetMouseY(void);
extern int GetCurrentQuadrant(void);
extern int set_kbd_focus_window(Window which);
extern Window get_kbd_focus_window(void);
extern int restore_kbd_focus(void);
extern void event_proc(Xv_Window window, Event *event);
extern int set_mouse_xy(Event *event);
extern int hide_quadrants(void);
extern int show_quadrants(void);
extern int winenter_invalid(Xv_Window window, Event *event);
extern int ignore_this_winexit(void);
extern int cursor_in_Panel(void);
extern int set_serial_feed_debug(int value);
extern int serial_feed_debug(void);
/* filemgr.c */
extern int (*ErrorReportFunc)(void);
extern char *GetEntryString(int which);
extern int PrintEntries(void);
extern int SetEntryString(int which, char *EntryKeyword, char *EntryValue);
extern int RestoreEntriesFromFile(char *filename, int NumUserEntries, char *(*GetUserEntryKeyword)(void), int (*SetUserEntryValue)(void), int (*ErrorFunc)(void));
extern int SaveEntriesToFile(char *filename, int NumUserEntries, char *(*GetUserEntryKeyword)(void), char *(*GetUserEntryValue)(void), int (*ErrorFunc)(void));
extern int AppendEntry(char *keyword, char *value);
extern int FindEntryWithString(char *String);
extern int FindEntryWithKeyword(char *EntryKeyword);
extern int SetNumFileEntries(int value);
extern int GetNumFileEntries(void);
extern int ReadFileIntoArray(char *filename, int (*ErrorFunc)(void));
extern int ReadFileIntoEntryArray(char *filename, int (*ErrorFunc)(void));
extern int WriteEntriesToFile(char *filename);
extern int OpenFile(char *filename, char *mode);
extern int CloseFile(char *filename, char *mode);
extern int LockFile(int fd, FILE *fp);
extern int UnlockFile(int fd, FILE *fp);
extern int SaveFile(char *filename, FILE *fp);
extern int RemoveSaveFile(char *filename);
extern int SetRecoveryMode(int value);
extern int GetRecoveryMode(void);
extern int SaveFileExists(char *filename);
extern int AlertUser(char *message);
/* fixes.c */
extern int num_of_fixees[5];
extern char fixee_label[5][20][13 +3];
extern int fixee_number[5];
extern int data_label_x[20][5];
extern int label_y[5][24];
extern int add_fixee;
extern int GetFixedFontWidth(int quadrant);
extern int GetFixedFontHeight(int quadrant);
extern int GetFixedAreaTooSmall(int quadrant);
extern int GetMaxFixees(void);
extern char *GetFixeeName(int quadrant, int which);
extern int setup_fix(int quadrant);
extern int list_fixed_labels(int quadrant);
extern int draw_fixed_header(int quadrant);
extern int event_in_chg_fixee_area(int x, int y);
extern int highlight_fixee_label(int quadrant);
extern int clear_fixee_label(int quadrant, int mode, int fixee_num);
extern int chg_fixee(Event *event);
extern int fixes(int quadrant);
extern int GetNumFixees(int quadrant);
extern int GetFixedDataLen(void);
extern int list_fixees(int quadrant, int start);
/* flat_panel.c */
extern int get_flat_panel_parms(char *filename);
extern int num_flat_panel_values(void);
extern int ParclDataToFlatPanel(void);
extern int set_flat_panel_flag(char *filename);
extern int flat_panel_data(void);
extern int format_buffer(char *buff, int value, int point, int mode);
extern int send_flat_panel_data(int point);
/* fonts.c */
extern int SetWINDSFonts(Frame frame);
extern int SetStandardFont(void);
extern int GetMinFontHeight(void);
extern int GetMinFontWidth(void);
extern int FindFont(int height, int width);
extern Xv_font GetWINDSFont(int which);
extern int SetWINDSFont(Frame frame, Xv_font *font, char name[]);
extern int SetDisplayFont(int quadrant);
extern Xv_font GetRangeLabelFont(int quadrant);
extern Xv_font GetTraceLabelFont(int quadrant);
extern Xv_font GetTimeFrameFont(int quadrant);
extern Xv_font GetTimeStampFont(int quadrant);
extern int SetTraceLabelFont(int quadrant, int which);
extern int SetLandmarkFont(int quadrant, int which);
extern Xv_font GetLandmarkFont(int quadrant);
extern int SetTimeFrameFont(int quadrant, int which);
extern int SetTimeStampFont(int quadrant, int which);
extern int SetRangeLabelFont(int quadrant, int defaultsize);
extern int SetSmallRangeLabelFont(int quadrant, int which);
extern int SetDefaultRangeLabelFont(int quadrant, int which);
extern Xv_font GetSmallRangeLabelFont(int quadrant);
extern Xv_font GetDefaultRangeLabelFont(int quadrant);
extern int SetRangeLabelFonts(int quadrant, int which);
extern int SetFixedDisplayFont(int quadrant, int which);
extern Xv_font GetFixedDisplayFont(int quadrant);
extern Xv_font GetListFont(int quadrant, int defaultsize);
extern int SetDefaultListFont(int quadrant, int which);
extern int SetSmallListFont(int quadrant, int which);
extern int GetDefaultListFont(int quadrant);
extern int GetSmallListFont(int quadrant);
extern int Set1dDisplayFont(int quadrant, int which);
extern Xv_font Get1dDisplayFont(int quadrant);
extern int Set2dDisplayFont(int quadrant, int which);
extern Xv_font Get2dDisplayFont(int quadrant);
extern int SetVectorFont(int quadrant, int which);
extern Xv_font GetVectorFont(int quadrant);
extern Xv_font GetAlertFont(void);
extern int SetCalibDisplayFont(void);
extern Xv_font GetCalibDisplayFont(void);
extern Xv_font GetAdscmdFont(void);
extern Xv_font GetStandardFont(void);
extern Xv_font GetOpPanelFont(void);
extern Xv_font GetControlPanelFont(void);
extern Xv_font GetImageHeaderFont(void);
extern Xv_font GetCopyrightFont(void);
extern XFontStruct *GetFontInfoStruct(Xv_font font);
extern int GetFontDescent(Xv_font font);
extern int GetFontAscent(Xv_font font);
extern int GetFontID(Xv_font font);
extern int GetFontWidth(Xv_font font);
extern int GetFontHeight(Xv_font font);
extern int GetFontBaseline(Xv_font font);
/* geom.c */
extern int avail_geoms(int which);
extern int num_geoms(void);
extern int tall_geom(int window);
extern int wide_geom(int window);
extern int get_default_geom(void);
extern int get_geom(int window);
extern int set_geom_parms(int window, int geom);
extern int geom_posn_x(int window, int geom);
extern int geom_posn_y(int window, int geom);
extern int set_geom(int window, int geom);
extern int unhide_window(int window);
extern int hidden_window(int window);
extern int set_geometry(int window);
/* hdr_wrap.c */
extern int InitHeader(char *hdr_file);
extern int find_var(char *varname);
extern char *hdr_fltno(void);
extern char *hdr_date(void);
extern struct Fl *GetHeader(void);
extern int read_hdr(int fd, struct Fl *hdr_ptr);
extern int is_digital_type(char *type);
/* help.c */
extern int make_help(void);
extern int MakeLeftOpImages(void);
extern int make_images(int area, Server_image p1, Server_image p2, Server_image p3);
extern int update_leftop(int quadrant, int hilited);
extern int chg_tb_help_image(int area);
extern int set_next_tb_image(int image);
extern int last_help_image(void);
/* history.c */
extern struct hist *save_start;
extern struct hist *save_end;
extern FILE *open_history_file(char *mode);
extern int get_history(void);
extern struct hist *search(char *name);
extern int update_dialogue(struct hist *member);
extern int update_histfile(void);
extern struct hist *add_member(char *name);
extern int init_reserved_space(struct hist *list);
extern int update_member(int which, struct hist *member, char *string, double coef);
extern int print_history(int diskfile);
/* ipc.c */
extern int SetListeningPost(char *client, int port, int addr);
extern int SetupWindsListening(char *client);
extern int SetupWindsBroadcast(char *client);
extern int CloseWindsBroadcast(void);
extern int CloseWindsListening(void);
extern int GetResponseToNetRequest(void);
extern int SetResponseToNetRequest(int value);
/* ipcdisp.c */
extern int CheckForNetworkMessages(void);
extern int ProcessWindsMessage(char *socket);
/* listprint.c */
extern char sock_buff[1024];
extern FILE *listFP;
extern int SetQuadPrinting(int quadrant);
extern int GetQuadPrinting(void);
extern int SetPrintMode(int mode);
extern int SetHeaderNeeded(int needed);
extern int init_printer_parms(void);
extern int lstat_update(int time_elapsed);
extern int get_values(int start, int num_points, int time_elapsed);
extern int SetWaitTimeForImage(int type, int geom);
extern int print_value(int quadrant, int index, int hr, int minut, int sec);
extern int print_header(int quadrant);
extern int new_printer_points(int time_elapsed);
/* lists.c */
extern int num_of_listees[5];
extern char unit_label[5][24][12];
extern char listee_label[5][24][13];
extern int listee_number[5];
extern int listees_per_page[5];
extern int label_x[5][24];
extern int add_listee;
extern int start_listee[4];
extern int GetDefaultListRate(void);
extern int GetListFontWidth(int varnamefont, int quadrant);
extern int GetListFontHeight(int varnamefont, int quadrant);
extern int GetListAreaTooSmall(int q);
extern int GetNumListees(int quadrant);
extern int GetNumListRows(int quadrant);
extern int GetListDataLen(void);
extern int GetListLeftMargin(void);
extern int GetMaxListees(void);
extern int GetMinListeesPerPage(void);
extern char *GetListeeName(int quadrant, int which);
extern int GetListRate(int quadrant);
extern int SetListRate(int quadrant, int rate);
extern int lists(int quadrant);
extern int list_values(int quadrant, int start, int numpts);
extern int setup_lists(int quadrant);
extern int list_listee_labels(int quadrant);
extern int draw_list_header(int quadrant);
extern int next_list_page(int quadrant);
extern int PreventWastedListArea(int quadrant);
extern int set_listees_per_page(int quadrant);
extern int event_in_chg_listee_area(int x);
extern int highlight_listee_label(int quadrant);
extern int clear_column(int quadrant, int listee);
extern int clear_listee_label(int quadrant, int mode, int listee);
extern int chg_listee(Event *event);
/* lmrks.c */
extern struct bounds *lmark_area[4];
extern int init_landmark_data(char *landmark_filename);
extern int save_lmark_setup(void);
extern int add_landmark(int quadrant, double lat, double lon, char *label);
extern int refresh_landmarks(int quadrant);
extern int draw_landmarks(int quadrant);
extern int draw_landmark_and_label(int quadrant, int op, int x, int y, char *label, int foreground_color, int bkgnd_color);
extern int set_landmark_area(int quadrant, int which, int x, int y, int width, int height);
extern int toggle_show_hidden(int quadrant);
extern int show_deleted_lmrks(int quadrant);
extern int hide_deleted_lmrks(int quadrant);
extern int update_hilited_landmark(int quadrant, int x, int y);
extern int clear_hilited_landmark(int quadrant);
extern int hide_landmark(int quadrant);
/* lstats.c */
extern int CreateStatsIndexArray(void);
extern int GetVarInStatsOutput(int index);
extern int SetVarInStatsOutput(int index, int selected);
extern char *GetNextStatsSeln(void);
extern int get_next_stats_seln(void);
extern int OpenStatsSelnsFile(char *mode);
extern int WriteStatsSelnsFile(char **names, int numnames);
extern char *GetStatsFileDir(void);
extern char *GetStatsPrefix(void);
extern char *GetStatsFilename(int suffix);
extern int OpenStatsOutputFile(void);
extern int print_stats(void);
extern int print_stat_header(void);
extern char *GetStatsFlushListTitle(void);
extern int lstatout(void);
extern int next_end_interval(int current, int interval);
extern int GetNeedStatsInit(void);
extern int SetNeedStatsInit(int init);
extern int SetStatsAutoPrintEnabled(int print);
extern int GetStatsAutoPrintEnabled(void);
extern int SetCurrentStatsInterval(int value);
extern int GetCurrentStatsInterval(void);
extern int FlushStatsAccumulations(void);
extern char *GetNextFlushString(void);
extern int SetNextFlushString(void);
extern int StatsIsFlushed(int hr, int minute, int sec);
extern int init_lstats(int hr, int minute, int sec);
extern int save_stats(void);
extern int clear_buffers(void);
extern int AccumulateStats(int time_slice);
/* menus.c */
extern Menu XySubtypeMenu;
extern Menu Pms2dSubtypeMenu;
extern Menu EtcSubtypeMenu;
extern Menu PlotspecMenu[6];
extern char DispTypeString[6][15];
extern int RememberCursorPosn(Xv_Window window, int x, int y);
extern int RestoreCursorPosn(void);
extern int SetSelectionMade(int selected);
extern void NoSelectionMade(void);
extern void MenuDismissed(void);
extern void get_entry(Menu menu, Menu_item item);
extern int make_alt_menu(void);
extern int SetFontForMenu(Menu menu);
extern int MenuWithSubTypes(int disptype);
extern int DestroyMenu(Menu menu);
extern int destroy_alt_menus(void);
/* monitor.c */
extern char *ProjectDirectory;
extern char *progName;
extern int InitMonitor(char **argv, int argc);
extern int SetHostName(void);
extern char *ConstructConnectedFileName(char *host);
extern int SetFileNames(void);
extern int GetArgs(char **cmdline, int numargs);
extern int GetWINDSServerOrExit(void);
extern int InitializeWindsServerDependents(void);
extern void MsgToCtlHostAndLog(char *message);
extern void MsgToLogAndConsole(char *msg);
extern void LogMsgSansTimeStamp(char *msg);
extern void LogMessage(char *message, int AddTimeStamp);
extern int CheckForNewSysLogMsgs(void);
extern int WriteToLog(char *message);
extern int ClassInitialize(void);
extern int LoopForever(void);
extern int CheckOnWINDSUpdating(void);
extern int CheckOnOWRunning(void);
extern int CheckForCoreFiles(void);
extern void MasterClassInit(void);
extern void SetupCoreFileChecks(void);
extern int ReplaceCurrentMonitor(void);
extern int GetNetconfigHosts(void);
extern int DefineNoUpdateFiles(void);
extern void CatchCoreSignal(int signal);
extern void CatchExitSignal(int signal);
extern int CleanupAndExit(int status, int removepid);
extern int CatchSignals(void);
extern int SetupIPC(void);
extern int GetMonitorSocketNumber(int session);
extern void TalkToSocket(int port, char *host);
extern int ListenOnSocket(int port);
extern int ReportToMaster(char *message);
extern int CheckForMessages(void);
extern int SetupDiskChecks(void);
extern int InitShutdownFiles(void);
extern int MasterClassTasks(void);
extern int CheckWINDSstatus(void);
extern void ClassifyAndMove(char *CoreFile);
extern void CoreFileCheck(char *directory);
extern int CheckDiskandSwapSpace(void);
extern int SetConnection(int connected);
extern int ClientClassTasks(void);
extern int ShutdownsClassTasks(void);
extern int ExecuteShutdownScript(char *message, char *flagfilename, char *scriptname, int argsfromfile, int chkconnection);
extern int CheckConnection(char *host);
extern int WINDSisBlowing(int host);
/* multiprint.c */
extern int (*MultiPrintFunc[][3])();
extern int GetMultiPrint(void);
extern int MultiPrint(int setup, int time);
extern int SetNumSetupsToPrint(int num);
extern int GetNumSetupsToPrint(void);
extern int SetSetupsPrinted(int num);
extern int GetSetupsPrinted(void);
extern int GetPrintNextTimeFrame(void);
extern int SetPrintNextTimeFrame(int print);
extern int SetRotateSetups(int rotate);
extern int GetRotateSetups(void);
extern int SetWindowRequestedPrint(int quadrant, int print);
extern int GetWindowRequestedPrint(int quadrant);
extern int SetAllWindowsRequestPrint(int print);
extern int RotateSetupsIfNeeded(int whence);
extern int TurnMultiPrintOff(void);
extern int PrintWindowForCurrentTimeFrameOnly(int quadrant);
extern int PrintWindowFromStartTimeThruEOF(int quadrant);
extern int PrintWindowFromCurrentTimeThruEOF(int quadrant);
extern int PrintCurrentWindowsForCurrentTimeFrameOnly(void);
extern int PrintCurrentWindowsFromStartTimeThruEOF(void);
extern int PrintCurrentWindowsFromCurrentTimeThruEOF(void);
extern int PrintEntireFolderForCurrentTimeFrameOnly(void);
extern int PrintEntireFolderFromStartTimeThruEOF(void);
extern int PrintEntireFolderFromCurrentTimeThruEOF(void);
extern int CheckForMultiPrints(int quadrant);
extern int AdjustForNextMultiPrint(void);
/* netcdf.c */
extern int error_response(char *cdfcall, long severity);
extern int OpenNetCDFFile(char *path, int notifyuser);
extern int dataset_init(void);
extern int GetNetCDFVarValues(char *varname, long start, long numvalues, void *values);
extern int get_netcdf_dataset_size(void);
extern int GetLastTimeOffset(void);
extern int get_num_netcdf_vars(void);
extern int set_BASETIME(void);
extern int get_netcdf_end_time(void);
extern int get_netcdf_start_time(void);
extern int get_netcdf_fileposn(void);
extern char *get_netcdf_date(void);
extern char *get_netcdf_varnames(char *namelist, long namelen);
extern int SetDataPtr(int index, unsigned int address);
extern int get_netcdf_data(long *timeptr, float *dataptr, long start, long numslices, long update_rate);
extern int get_BASETIME(void);
/* netconfig.c */
extern char display_mode[128];
extern char display_pnum[128];
extern char display_file[128];
extern char color_map[128];
extern int open_netconfig(void);
extern int close_netconfig(void);
extern int skip_doc_lines(void);
extern int get_num_winds_sessions(void);
extern int set_winds_sessions(char *client, char *pnum, char *computehost, char *disphost);
extern int set_session(char *client, char *host, int number);
extern char *get_display_host(int session);
extern int get_session_number(char *host);
extern int get_display_number(int session);
extern int get_netconfig_entry(char hostname[], char mode[], char pnum[], char file[]);
extern int get_entry_by_locn(char locn[]);
extern int get_entry_by_name(char hostname[]);
extern int GetScreenWidth(void);
extern int GetScreenHeight(void);
extern int SetScreenDimensions(int width, int height);
extern int SetScreenGeometry(void);
extern int set_num_displays(void);
extern int get_num_displays(void);
extern char *set_proj_no(void);
extern char *get_pp_filename(void);
extern int post_processing_locn(char locn[]);
extern int post_processing_mode(void);
extern char *get_proj_number(void);
extern int IsWindsSlave(char locn[]);
extern int IsWindsComputeHost(char host[]);
extern int IsWindsControlHost(char host[]);
extern int FindAndSetControlHost(void);
extern int SetControlHost(char host[]);
extern char *GetControlHost(void);
extern char *get_disp_locn(void);
extern int flat_panel_display_data_needed(void);
extern int lcd_display(void);
extern int flip_display(void);
extern int AsciiDataNeeded(void);
extern int UsingNonLocalPortServer(void);
extern int GetInputMode(void);
extern int SetInputMode(void);
extern int init_setup_mode(void);
extern int netcdf_mode(void);
extern int DiskDataToNetCDF(void);
extern int rawdata_from_disk(void);
extern int data_from_ads(void);
extern char *get_disp_host(void);
extern int get_printer(char port[]);
extern char *SaveDir;
extern int SetSaveDirectory(void);
extern char *GetSaveDirectory(void);
extern char *get_port_server_host(void);
extern int set_port_server_host(void);
extern int set_printer_ports(void);
extern int get_bw_image_port(void);
extern int set_bw_image_port(void);
extern int SetNeedPauseOnLists(int pause);
extern int GetNeedPauseOnLists(void);
extern int SetNumPrintRows(int rows);
extern int GetNumPrintRows(void);
extern int get_color_image_port(void);
extern int set_color_image_port(void);
extern int get_lstat_port(void);
extern int set_lstat_port(void);
extern char *GetDefaultProjDir(void);
extern int SetFlushOnImagePrint(int flush);
extern int GetFlushOnImagePrint(void);
extern int SetResetOnStartup(int reset);
extern int GetResetOnStartup(void);
extern int SetDisplayMode(char mode[]);
extern char *GetDisplayMode(void);
extern char *GetWINDSServer(void);
extern char *GetProjectNumberFromFile(void);
extern int NotifyWINDSProcess(char message[]);
/* new_setup.c */
extern int SetNewSetupNeeded(int quadrant, int value);
extern int GetNewSetupNeeded(int quadrant);
extern int ConfigPlotType(int plottype, int quadrant);
extern int SetVarType(int type);
extern void InstallNewSetup(void);
extern int fini_new_setup(int quadrant);
extern int SetInstallNewSetupVars(int quadrant);
extern int GetNumNewSetupSelns(void);
extern int GetMaxNewSetupSelns(void);
extern int TransferQuadSpecificVars(int old, int new);
extern int UpdateNewSetupSelns(char *varname, int selected);
extern int UpdateSelnsMade(void);
extern int got_minimal_setup(void);
extern int GetTotalDepvars(void);
extern char *GetNewSetupSeln(int which);
extern int GetVartypeIsIndep(void);
extern int AdjustForPlotType(void);
extern int InitNewSetupVars(int initselns);
extern int initiate_new_setup(int quadrant, int plottype);
extern int GetPendingPlotType(void);
extern char *GetVarTypeChoiceString(int numchoice);
extern int UpdateVarTypeChoices(void);
extern int UpdateVarTypeChoice(int which);
extern int SetVarTypeChoice(int numchoice, char *choice);
extern int UpdateVarTypeChoiceString(int which);
extern int AdjustVarTypes(void);
extern int GetNumPlotTypeChoices(void);
extern char *GetPlotTypeChoiceString(int which);
extern int GetVarTypeIsExclusive(void);
extern int GetNewSetupInProgress(void);
/* op_panels.c */
extern Panel op_panel[4];
extern void history_proc(Panel_item item, int value, Event *event);
extern void probe_1d_proc(Panel_item item, Event *event);
extern void probe_1d_cnts_proc(Panel_item item, Event *event);
extern void probe_1d_liters_proc(Panel_item item, Event *event);
extern void probe_1d_xtype_proc(Panel_item item, Event *event);
extern void probe_1d_ytype_proc(Panel_item item, Event *event);
extern void hilited_proc(Panel_item item, Event *event);
extern void lmrk_ops_proc(Panel_item item, int value, Event *event);
extern void geom_ops_proc(Panel_item item, int value, Event *event);
extern void trk_type_item_proc(Panel_item item, Event *event);
extern void lmrk_button_proc(Panel_item item, Event *event);
extern int GetChgVectorYComp(void);
extern int GetChgVectorXComp(void);
extern int SetChgVectorXComp(int set);
extern int SetChgVectorYComp(int set);
extern void y_comp_proc(int quadrant, Event *event);
extern void x_comp_proc(int quadrant, Event *event);
extern void vector_button_proc(Panel_item item, Event *event);
extern void scale_button_proc(Panel_item item, Event *event);
extern void scale_type_button_proc(Panel_item item, int value, Event *event);
extern void indepvar_button_proc(Panel_item item, int value, Event *event);
extern void geom_button_proc(Panel_item item, Event *event);
extern void probe_2d_proc(Panel_item item, int value, Event *event);
extern int GetIntervalButtonXPosn(void);
extern int SetIntervalButtonXPosn(int x);
extern int CheckVectorButtonValue(int quadrant, int trace, int show);
extern int VectorsOnOffProc(Panel_item item, int value, Event *event);
extern int ConstructItemChoices(Panel_item item);
extern void colors_proc(Panel_item item, int value, Event *event);
extern void comps_proc(Panel_item item, int value, Event *event);
extern void printer_proc(Panel_item item, int value);
extern void genop_proc(Panel_item item, int total_value, Event *event);
extern void chgdisp_proc(Panel_item item, Event *event);
extern int set_1d_probe_buttons(int quadrant);
extern int set_2d_probe_buttons(int quadrant);
extern int set_2d_probe_button_vals(int quadrant);
extern int set_indepvar_button(int quadrant, int value);
extern int set_scale_type_button(int quadrant);
extern int set_vector_color_button(int quadrant, int value);
extern int set_genop_buttons(int quadrant);
extern int set_hilite_buttons(int quadrant);
extern int set_geom_buttons(int quadrant);
extern int set_1d_probe_disp_parms(int quadrant);
extern int set_isolate_traces(int quadrant, int value);
extern int get_isolate_traces(int quadrant);
extern int get_last_panel_shown(int quadrant);
extern int set_ScaleType(int quadrant);
extern int set_scale_type(int quadrant, int value);
extern int get_scale_type(int quadrant);
extern int get_hilited_op(int quadrant);
extern int get_genop_value(int quadrant);
extern int set_genop_value(int quadrant, int value);
extern int set_vector_items(int quadrant);
extern int RefreshOpPanel(int quadrant);
extern int SetOpPanelGeom(int window);
extern int GetOpPanelRowsHeight(void);
extern int GetOpPanelHeight(void);
extern int set_op_geom(int window);
extern int set_comp_label(int quadrant, int component);
extern int set_genop_hiliting(int status_needed, int quadrant, int value);
extern int exec_hilite_op(int quadrant, Event *event);
extern int clear_genop_status(int quadrant);
extern int save_genop_value(int quadrant, int value);
extern int show_lmrk_panel(int quadrant, int show);
extern int show_geom_panel(int quadrant, int show);
extern int show_scales_panel(int quadrant, int show);
extern int show_vector_ops(int quadrant, int show);
extern int show_etc_panel(int quadrant, int show);
extern int hide_oppanel(int quadrant);
extern int DispSubMenusShowing(int quadrant);
extern int ActivateOpPanels(int active);
extern int show_oppanel(int which, int quadrant);
extern int show_op_msg(int quadrant, char *msg);
extern int make_op_panels(void);
extern int make_genop_buttons(int quadrant);
extern int make_1d_probe_ops(int quadrant);
extern int make_1d_disp_parms(int quadrant);
extern int make_2d_probe_ops(int quadrant);
extern int make_hilited(int quadrant);
extern int make_trk_type_item(int quadrant);
extern int make_lmrk_ops(int quadrant);
extern int make_vector_ops(int quadrant);
extern int SetYComponentLabel(int quadrant);
extern int SetXComponentLabel(int quadrant);
extern int make_scale_ops(int quadrant);
extern int make_geom_ops(int quadrant);
extern int make_history(int quadrant);
extern int make_message(int quadrant);
extern int make_chg_disp(int quadrant);
extern int AttachPlotspecMenus(int quadrant);
extern int ShowDispSubMenus(int quadrant);
extern int HideDispSubMenus(void);
/* panel_list.c */
extern int (*ShowTypeFunc[])(void);
extern int (*ShowDomainFunc[])(void);
extern int ShowScrollPanel(Panel_item panellist, int quadrant, Event *event, char *title);
extern int DismissScrollPanel(void);
extern int DismissSansSelection(void);
extern int SetScrollPanelShowing(int show);
extern int GetScrollPanelShowing(int check);
extern int HideScrollPanel(void);
extern int GetPanelIsScrollPanel(Panel panel);
extern int ResizeScrollPanel(Frame frame);
extern int CreateScrollPanel(Frame frame, int width);
extern int MakeTimeFrameButtons(void);
extern void PanelListProc(Panel_item item, char *string, caddr_t client_data, Panel_list_op op, Event *event, int row);
extern void PrintWindowProc(Panel_item item, Event *event);
extern char *GetPrintWindowName(void);
extern char *GetPrintWindowDir(void);
extern int RemovePrintWindowFiles(void);
extern int SetDomainChoices(void);
extern int SetCategoryChoices(void);
extern int SetTypeChoices(void);
extern int SetListTitle(Panel_item panellist, char *sorttype);
extern int SetCustomListTitle(char *title);
extern char *GetCustomListTitle(void);
extern char *GetPanelListTitle(void);
extern int ShowCategoryButton(void);
extern int ShowTypeButton(void);
extern int SetDomainButtonValue(char *keyword);
extern int SetTypeButtonValue(char *keyword);
extern int ShowKeywordButton(void);
extern int ShowDomain(Panel_item item, int value);
extern int AdjustForDomainButton(Panel_item button, int textitem);
extern int ActivateApplyButton(int active);
extern int SetExclusiveChoices(Panel_item panellist, int exclusive, int set);
extern int GetListFromVarFilter(void);
extern int SetListFromVarFilter(int set);
extern int GetListFromTextFile(void);
extern int SetListFromTextFile(int set);
extern int GetListFromStrings(void);
extern int SetListFromStrings(int set);
extern int FillScrollListFromStrings(char *title);
extern int FillScrollListFromTextFile(char *title);
extern int FillScrollList(int (*filter)(int), char *title);
extern int ShowSelectedItemPage(void);
extern int SetEmptyList(Panel_item panellist, char *title);
extern int FillPanelList(Panel_item panellist, char *title);
extern int DeleteScrollLists(int numentries);
extern int InstallScrollLists(int numentries, char *title);
extern int ResizeNewSetupButtons(void);
extern int PositionNewSetupButtons(void);
extern int ShowNewSetupMenu(int quadrant);
extern int SetCurrentSetupQuadrant(int quadrant);
extern int GetCurrentSetupQuadrant(void);
extern void SetCurrQuadProc(Panel_item item);
extern void SetVarTypeProc(Panel_item item);
extern int SetNewSetupChoicesExclusive(void);
extern int GetVarTypeButtonActive(void);
extern int ShowVarTypeButton(void);
extern int HideVarTypeButton(void);
extern int ActivateVarTypeButton(int active);
extern int ShowPlotTypeButton(void);
extern int HidePlotTypeButton(void);
extern int ShowCurrentQuadButton(void);
extern int HideCurrentQuadButton(void);
extern int SetVarTypeButtonValue(int value);
extern int ClearVarTypeChoices(void);
extern int SetPlotTypeButtonValue(int value);
extern int SetPlotTypeChoices(int numchoices, char *(*ChoiceStringFunc)());
extern int UpdateVarTypeButton(int numchoice, char *string);
extern void SetPlotTypeProc(Panel_item item);
extern int ShowVarMenu(int quadrant, Event *event);
extern int SetHistoryVarname(char *varname);
extern int AdjustHistoryButtonValues(Panel_item adjusted_item);
extern void ChgHistoryTime(Panel_item item, int value, Event *event);
extern int StripValue(int value, int filter);
extern int ChgItemValue(void);
extern int GetNeedItemValueChg(void);
extern int SetNeedItemValueChg(Panel_item item);
extern int UpdateTimeFrameMessage(void);
extern int MakeTimeFrameMessage(void);
extern int GetHistoryStartHour(void);
extern int GetHistoryStartMinute(void);
extern int GetHistoryStartSecond(void);
extern int GetHistoryEndHour(void);
extern int GetHistoryEndMinute(void);
extern int GetHistoryEndSecond(void);
extern int GetMaxLenStrings(void);
extern int SetNumStrings(int num);
extern int GetNumStrings(void);
extern int GetHistoryToStrings(char *varname);
extern void ShowHistory(void);
extern void DeleteSelection(void);
extern void InstallSelection(Panel_item item, Event *event);
extern int SetDeleteButtonLabel(void);
extern int SetHistoryButtonLabel(char *varname);
extern int SetApplyButtonLabel(int change, char *target, char *newvar);
extern int UpdateButtonLabels(Panel_item panellist, int scrolllistposn);
extern int ShowStatsMenu(int which, Event *event);
extern int SetStatsSeln(int which, int set);
extern char *GetStatsSeln(int which);
extern int InitStatsPanelList(void);
extern char *GetSelectAllButtonLabel(void);
extern int SetSelectAllButtonLabel(void);
extern int GetAllStatsSelected(void);
extern void ResetFromFileProc(void);
extern void ToggleAllProc(void);
extern int SetAllStatsSelns(int select);
extern int SelectAllStatsEntries(int select);
extern int SetStatsEntry(char *string, int on, int force);
extern int SetStatsListSelected(int posn, int on);
extern int SetAllOutputVars(int set);
extern int InitStatsSelnsFromFile(void);
extern void ToggleStatsAutoPrint(Panel_item item, int value);
extern int ChgFlushMessage(char *string);
extern int ShowStatsFlush(Menu menu, Menu_item item);
extern int CreateStatsFlushMenu(void);
extern int InitStatsFlushMenu(void);
extern int RemoveStatsFlushFiles(void);
extern int GetNumStatsFlushMenuItems(void);
extern int ShiftMenuItems(int suffix, char *starttime, char *endtime);
extern int AddToStatsFlushMenu(int filenamesuffix, char *starttime, char *endtime);
extern Panel_setting ChgStatsInterval(Panel_item item);
extern int SetStatsIntervalButtonValue(int value);
extern void SaveSelnsToFile(Panel_item item, int value);
extern int ShowAttrsMenu(int which, Event *event);
extern void PrintAttributesHeader(FILE *fd);
extern void ModifyAttributes(Panel_item item, Event *event);
extern int SetSelectedVars(Panel_item panellist, char *string, int value, int on);
extern int SetAllPanelItems(Panel_item panellist, int set);
extern int GetScrollListPosn(char *varname);
extern char *GetScrollListVarname(int posn);
extern int SetPanelSelections(Panel_item panellist);
extern int SetSelectionsFromList(Panel_item panellist, int numselns, char *(*selns)());
extern int SetPanelSelection(Panel_item panellist, int entry, int select);
extern int SetOverallLayout(Panel_item panellist, int quadrant);
extern int GetScrollPanelWidth(void);
extern int GetScrollPanelHeight(void);
extern int GetNominalScrollPanelWidth(void);
extern int GetNominalScrollPanelHeight(void);
extern int SetScrollPanelDims(int width);
extern int GetScrollBarWidth(void);
extern int SetPanelListLayout(Panel_item panellist, Panel_item button);
extern int GetCharWidthOfPanel(void);
extern int SetKeyboardButtonWidth(void);
extern int SortByCategory(Panel_item item, int value);
extern int VarIsInCategory(int entry);
extern int SortByType(Panel_item item, int value);
extern int VarIsDerived(int entry);
extern int VarIsDigital(int entry);
extern int VarIsAnalog(int entry);
extern int VarIsRaw(int entry);
extern int SortByAll(void);
extern int SortByDerived(void);
extern int SortByDigital(void);
extern int SortByAnalog(void);
extern int SortByRaw(void);
extern Panel_setting SortByKeyword(Panel_item item, Event *event);
extern char *GetUserKeyword(void);
extern int SetUserKeyword(char *keyword);
extern int VarHasKeyword(int entry);
/* panel_menus.c */
extern int ShowCurrentPanelMenu(void);
extern int GetNeedRefreshFolderList(void);
extern int SetNeedRefreshFolderList(int refresh);
extern int HideCurrentPanelMenu(void);
extern int hide_panel_menu(Panel_item item, Event *event);
extern int UnhiliteControlPanelButton(void);
extern int RemoveAllPanelMenus(void);
extern int RemoveCurrentPanelMenu(void);
extern int SetCurrentPanelMenu(int which);
extern void ResetPrinterFunc(Panel_item item, Event *event);
extern int GetDisplayHeight(int which, int field);
extern int GetNumDispRows(void);
extern int make_panel_menus(Frame frame, int width, int height);
extern char *zero_trimmed(float val);
extern Panel_setting EnterFolderInfo(Panel_item item, Event *event);
extern int SetFolderEditItems(void);
extern int GetFolderEditsEnabled(void);
extern int FoldersProc(Panel_item item, int value, Event *event);
extern int SetMenuFieldAttrs(int which, int field);
extern int DestroyMenuFieldButton(int which, int field);
extern int GetSetupListTitleLength(void);
extern char *GetSetupListTitle(int row);
extern void FolderListProc(Panel_item item, char *string, caddr_t client_data, Panel_list_op op, Event *event, int row);
extern int CreateMenuFieldButton(int which, int field);
extern int GetFieldPosnsSet(int which);
extern int SetFieldPosnsSet(int which, int set);
extern int ClearAllFieldPosnsSet(void);
extern int set_field_positions(int which);
extern int GetMenuItemHeight(int which, int field);
extern int FitFolderHeight(int which);
extern int SizePanelMenu(int which);
extern int show_panel_menu(int which);
extern char *GetMessageLabel(int which, int field, char string[]);
extern int set_menu_field_string(int which, int field, int item_number, char string[]);
extern int YBelowPanel(Panel panel);
extern int XRightOfPanel(Panel panel);
extern int XRightOfMenuField(int which, int field);
extern int YSameAsMenuField(int which, int field);
extern int YBelow(Panel_item object);
extern int ExtraLeftMargin(void);
extern int AtLeftMargin(void);
extern int GetMaxPanelMenuWidth(void);
extern int GetMaxPanelMenuHeight(void);
extern int create_menu_field(int which, int field);
extern char *GetPanelListString(int which, int field);
extern int GetFieldValue(int which, int field);
extern int SetFieldValue(int which, int field, int value);
extern int SetCurrentPlotspecName(char string[]);
extern char *GetCurrentPlotspecName(void);
extern int GetCurrentPlotspecNumber(void);
extern int SetCurrentPlotspecNumber(int value);
extern int UpdatePlotspexFields(char string[], int menuvalue);
extern int RefreshFolderList(void);
extern int SetPlotspexMsgValues(char string[], int value);
extern int SetPlotspexFieldsActive(void);
extern void PlotspexProc(Panel_item item, int value, Event *event);
extern void PrintersProc(Panel_item item, int value, Event *event);
extern int AttachPrintConfigMenus(void);
extern int GetCurrentAddPrinter(void);
extern int SetCurrentAddPrinter(int printer);
extern int GetCurrentConfigPrinter(void);
extern int SetCurrentConfigPrinter(int printer);
extern char *GetCurrentAddPrinterName(void);
extern int SetCurrentAddPrinterName(char printername[]);
extern char *GetCurrentConfigPrinterName(void);
extern int SetCurrentConfigPrinterName(char printername[]);
extern int UpdateConfigFields(char printername[], int pendingmode);
extern void EditPrinter(Menu menu, Menu_item item);
extern void DisablePrinter(Menu menu, Menu_item item);
extern void EnablePrinter(Menu menu, Menu_item item);
extern int GetPendingConfigMode(void);
extern int SetPendingConfigMode(int pendingmode);
extern void PrintConfigProc(Panel_item item, int value, Event *event);
extern char *get_var_description(int index);
extern char *get_menu_title_string(int menu);
extern int ErrorReport(char message[]);
extern void save_selns_proc(Panel_item item, Event *event);
extern char *ConstructPlotspexFilenameFromFolderName(char foldername[]);
extern int GetCurrentFolderDeleted(void);
extern int SetMenuFieldInactive(int which, int field, int value);
extern int SetCurrentFolderDeleted(int value);
extern int SetSelectFolderDisplayLevel(void);
extern int SetCurrentFolderMessage(void);
extern int RemovePlotspexFolder(char name[]);
extern int SaveNewFolder(char name[]);
extern int CopyPlotspexFile(char srcname[], char destname[]);
extern int ChangePasswordEntry(char password[]);
extern int SetPlotspexFolderMenu(void);
extern int InitPlotspexParmValue(int field, char string[]);
extern int GetSavedPlotspexFolderName(void);
extern int InitPlotspexFolderMenuValue(void);
extern int InitPrintFieldValue(int field, char string[]);
extern char *GetPrinterNameKeyword(int printer);
extern char *GetPrinterNameValues(int printer);
extern char *GetPlotspexParmValues(int which);
extern char *GetPrintEntryKeyword(int entry);
extern char *GetPrintEntryValue(int field);
extern int CreatePrintConfigMenus(void);
extern char *GetCreateModeName(int which);
extern char *GetShowSetupName(int which);
extern int ItemIsSelectFolderButton(Panel_item item);
extern int GetNeedFillDisplays(void);
extern int SetNeedFillDisplays(int value);
extern int CreateFolderButtons(void);
extern int SetSavedValue(int value);
extern int GetSavedValue(void);
extern int CreatePlotspexChoices(void);
extern int GetFolderChanged(void);
extern int SetFolderChanged(int value);
extern int SetPasswordGiven(int value);
extern int GetPasswordGiven(void);
extern int CreatePrintingChoices(void);
extern int fill_menu(int which);
extern int FieldsPerMenu(int which);
extern int ItemsPerField(int which, int field);
/* panels.c */
extern int GetStandardFontHeight(void);
extern int GetStandardFontWidth(void);
extern int RefreshPanels(void);
extern int set_current_panel(int panel);
extern int get_current_panel(void);
extern int DrawPanelVerticalEdges(Panel panel);
extern int DrawPanelBorders(Panel panel);
extern int panel_repaint(Panel panel, Xv_Window pw);
extern void panel_event_proc(Panel_item item, Event *event);
extern Notify_value ScrollPanelInterposer(Panel panel, Event *event, Notify_arg arg, Notify_event_type type);
extern int ShowTopOfMenu(Panel_item panellist);
extern int SetSelectedPanelItem(Panel_item panellist, int entry, int select);
extern int GetNextSelection(Panel_item panellist, int last, int first);
extern int GetNumItemsSelected(Panel_item panellist);
extern int SetPanelLabelString(Panel_item button, char *string);
extern int SetPanelTitle(Panel panel, Panel_item item, char *title);
extern int PositionToRightOfButton(Panel_item item, Panel_item neighbor);
extern int HidePanelItem(Panel_item button);
extern int ShowPanelItem(Panel_item button);
extern int SetButtonMinValue(Panel_item button, int value);
extern int SetButtonMaxValue(Panel_item button, int value);
extern int GetButtonMinValue(Panel_item button);
extern int GetButtonMaxValue(Panel_item button);
extern int GetButtonValue(Panel_item button);
extern int SetButtonColor(Panel_item button, int color);
extern int SetButtonValue(Panel_item button, int value);
extern int SetButtonLabel(Panel_item button, char *label);
extern int SetButtonMessage(Panel_item button, char *msg);
extern int GetButtonIsActive(Panel_item button);
extern int SetChoiceString(Panel_item button, int choice, char *string);
extern int ClearChoiceStrings(Panel_item button);
extern int SetItemInactive(Panel_item item, int inactive);
extern int DeletePanelListRows(Panel_item panellist, int start, int number);
extern int PositionBelowButton(Panel_item button, Panel_item anchor);
extern int SetAllChoicesOff(Panel_item item);
extern int GetItemExclusive(Panel_item item);
extern int SetItemExclusive(Panel_item item, int exclusive);
extern int GetCanHaveZeroChoices(Panel_item item);
extern int SetCanHaveZeroChoices(Panel_item item, int allowed);
extern int DestroyPanel(Panel panel);
extern int AdjustNrows(Panel_item button, int width);
extern int GetHeightOfButton(Panel_item button);
extern int GetBottomOfButton(Panel_item button);
extern int get_panel_event(void);
extern int set_panel_event(int id);
extern void panel_background_proc(Panel panel, Event *event);
extern int event_in_ctl_panel(void);
extern int event_in_op_panel(void);
extern int event_in_setup_panel(void);
extern int event_in_panel_menu(void);
extern int current_panel_menu_area(void);
/* plotattrs.c */
extern char *custom_range[5];
extern char *custom_mins[5];
extern int *dep_invert_scale[5];
extern int *indep_invert_scale[5];
extern char *units;
extern char *default_range;
extern char *default_mins;
extern int indep_attr_num[5];
extern int dep_attr_num[5][24];
extern struct varattrs *VarAttrs;
extern char *GetPlotAttrName(int index);
extern char *GetVarListName(int index);
extern char *GetVarAttrName(int index);
extern char *get_vartitle(int index);
extern char *get_varunits(int index);
extern int get_var_rng_is_fixed(int index);
extern double get_var_rngmin(int index);
extern double get_var_rngmax(int index);
extern double GetTotalRange(int index);
extern double get_var_plus_or_minus(int index);
extern int get_indep_attr_num(int quadrant);
extern int set_indep_attr_num(int quadrant, int value);
extern int get_dep_attr_num(int quadrant, int which);
extern int set_dep_attr_num(int quadrant, int which, int value);
extern int install_new_attr(int plottype, char *new_name, char *new_units, char *new_range, char *new_minimum);
extern int get_plot_attr(int quadrant, int mode, char varname[]);
extern int add_entry_to_file(char *filepath, char *name, char *Units, char *range, char *minimum);
extern int chg_plot_attrs(int type);
extern int get_plot_attrs(int type);
extern int GetSizeOfAttrDatabase(void);
extern int GetVarListIndex(char *varname, int OrWithMode);
extern int GetPlotAttrIndex(char *varname, int checkfordefault);
extern int get_num_of_categories(void);
extern struct cat *first_category(void);
extern char *GetNextCategory(void);
extern char *GetFirstCategory(void);
extern int get_bulletin_9(void);
extern int category_type(char *s);
extern struct parameter *top_of_bulletin9(void);
/* plot_events.c */
extern int process_clix(int op);
extern int chg_scale(int quadrant, int op);
extern int ChgTrace(Event *event);
extern int DeleteTrace(void);
extern int InstallVariable(int selection);
extern int add_trace(Event *event);
extern int zoom_scale(int op);
extern int toggle_autoscale(int quadrant);
extern int toggle_mode(int quadrant);
extern int mode_toggle(int quadrant, int number);
extern int reset_plot_attr(int quadrant);
extern int set_hex(int hex_on);
extern int toggle_fix_float(int quadrant);
extern int toggle_rngtyp(int quadrant, int trace, int old_type);
/* plots.c */
extern int update_mode[5];
extern double dep_min[5][4];
extern double indep_min[5];
extern double dep_max[5][4];
extern double indep_max[5];
extern double dep_intrvl[5][4];
extern double indep_intrvl[5];
extern int rleft[5];
extern int rtop[5];
extern int rwidth[5];
extern int rheight[5];
extern int rbottom[5];
extern int rright[5];
extern int num_of_traces[5];
extern int trace_number[5];
extern char trace_label[5][4][40 +2*6];
extern char indep_label[5][4][40 +2*6];
extern int dep_lbl_len[5][4][20];
extern int indep_lbl_len[5][10];
extern int max_dep_len[5][4];
extern int max_indep_len[5];
extern char dep_rnglbl[5][4][20][64];
extern char indep_rnglbl[5][10][64];
extern int dep_rng_typ[5][4];
extern int indep_rng_typ[5];
extern double clip_tolerance[5][4];
extern double indep_clip_tolerance[5];
extern int skew_y_tix[4];
extern int skew_x_tix[4];
extern double skew_ymin[4];
extern double skew_ymax[4];
extern int time_color[5];
extern int GetVarIsIndep(int quadrant);
extern int GetTimeStampFontHeight(int quadrant);
extern int GetTimeStampFontWidth(int quadrant);
extern int GetTimeFrameFontHeight(int quadrant);
extern int GetTimeFrameFontWidth(int quadrant);
extern int GetRangeLabelFontHeight(int quadrant);
extern int GetRangeLabelFontWidth(int quadrant);
extern int GetTraceLabelFontHeight(int quadrant);
extern int GetTraceLabelFontWidth(int quadrant);
extern int GetXYAreaTooSmall(int quadrant);
extern int setup_plots(int quadrant);
extern int ClearWindow(int quadrant);
extern int draw_bkgnd(int quadrant);
extern int set_time_range(int quadrant, int xrange_seconds);
extern int get_offset(int quadrant);
extern int draw_tick_marks(int quadrant, int offset);
extern int DrawPlotBorders(int quadrant);
extern int remove_borders(int quadrant);
extern int restore_borders(int quadrant);
extern int setscales(int quadrant);
extern int adjust_points(int quadrant, int trace, int *x1, int *y_1, int *x2, int *y2);
extern int SetPlotBorderHeight(int quadrant);
extern int DrawTraceLabels(int quadrant);
extern int XAXIS_HILITE_Y(int q, int trace);
extern int SetXaxisIndepVarXPosns(int quadrant);
extern int GetXaxisIndepVarYposn(int quadrant);
extern int SetXaxisDepVarYPosns(int quadrant);
extern int GetXaxisDepVarYPosn(int quadrant, int trace, int tick, int color);
extern int SetYaxisIndepVarXposns(int quadrant);
extern int GetYaxisIndepVarYPosn(int bottom, int tick, int interval);
extern int GetYaxisDepVarYPosn(int quadrant, int trace, int tick, int interval, int color);
extern int InitYaxisIndepVarXPosn(int quadrant);
extern int InitYaxisRngLblXPosns(int quadrant);
extern int InitYaxisDepVarXPosn(int quadrant);
extern int GetYaxisDepVarXposn(int quadrant, int tick, int trace, int color);
extern int SetPlotBorderWidth(int quadrant);
extern int SetTickIntervals(int quadrant);
extern int SetPlotBorders(int quadrant);
extern int SetFontsAndPlotBorders(int quadrant, int recurse);
extern int GetRangeLabels(int quadrant, int num_traces);
extern int LayoutNDrawRangeLabels(int quadrant);
extern int GetRangeLabelRightMargin(int quadrant);
extern int time_stamps(int quadrant);
extern int data_stamps(int quadrant, int current_point);
extern int set_dep_range(int quadrant, int type);
extern int set_indep_range(int quadrant, int type);
extern int set_float_dep_range(int quadrant, int trace, double midpt, double plus_or_minus, int mode, int attrnum);
extern int set_float_indep_range(int quadrant, double midpt, double plus_or_minus, int mode, int attrnum);
extern int set_fixed_dep_range(int quadrant, int trace, double bot, double top, int attrnum);
extern int set_fixed_indep_range(int quadrant, double bot, double top, int attrnum);
extern int event_in_add_trace_area(int y);
extern int event_in_chg_trace_area(int y);
extern int event_in_chg_time_scale_area(int y);
extern int TopOfTraceLabel(int quadrant, int trace);
extern int event_in_chg_x_scale_area(int y);
extern int event_in_chg_y_scale_area(int x, int y);
extern int event_in_plot_frame_area(int x, int y);
extern int highlight_trace_label(int quadrant, int operation);
extern int clear_trace_label(int quadrant, int mode, int trace_num);
extern int highlight_range_label(int quadrant);
extern int clear_range_label(int quadrant, int trace);
extern int draw_skew_bkgnd(Drawable xid, int quadrant);
extern int get_skewt_info(int quadrant);
extern int GetStackedLabelOffset(int quadrant, int toplabel);
extern int GetAscentStackedLabel(int quadrant);
extern int GetHeightStackedLabel(int quadrant);
extern int DrawXaxisDepVarRngLbls(int quadrant, int color, int trace);
extern int DrawYaxisIndepVarRngLbls(int quadrant, int color);
extern int DrawXaxisIndepVarRngLbls(int quadrant, int color);
extern int DrawYaxisDepVarRngLbls(int quadrant, int color, int trace);
extern int GetMaxIndepVarLen(int quadrant);
extern int GetMaxDepVarLen(int quadrant);
extern int GetMaxLenYaxisLabel(int quadrant);
extern int GetMaxLenXaxisLabel(int quadrant);
extern int CheckRngLblFontSizes(int quadrant, int length, int xinterval, int yinterval);
extern int DrawRangeLabels(int quadrant, int color, int trace);
extern int DrawSkewtRngLbls(int quadrant, int color, int trace);
/* plotspex.c */
extern struct alt *plotspec;
extern double tolerance_factor[5];
extern int clip_chk_interval[5];
extern int seconds_to_avg[5];
extern int xaxis_seconds[5];
extern int plot_type[5];
extern int autoscale[5];
extern double skew_minpress[5];
extern double skew_mintemp[5];
extern int IndepvarYaxis[5];
extern char usrvar[5][24][13];
extern char indepvar_name[5][13];
extern char description[27];
extern int overwrite;
extern int GetQuadrantVideoSource(int quadrant);
extern int SetQuadrantVideoSource(int quadrant, int videosource);
extern int GetVideoShowing(int quadrant);
extern int SetVideoShowing(int quadrant, int showing);
extern char *GetPlotspexParmKeyword(int which);
extern int GetNeedSaveSetup(int quadrant);
extern int SetNeedSaveSetup(int quadrant, int value);
extern int GetNeedInitPlotspex(void);
extern int SetNeedInitPlotspex(int value);
extern int SetCurrentPlotspexFolderName(char *name);
extern char *GetCurrentPlotspexFolderName(void);
extern int PlotspexFolderIsDefault(char *name);
extern int SetPlotspexFilename(void);
extern char *GetPlotspexFilename(void);
extern int SetPlotspexFolderName(int which, char *name);
extern int SetPlotspexFolderNames(void);
extern int SetNumPlotspexFolders(int value);
extern int GetNumPlotspexFolders(void);
extern char *GetPlotspexFolderName(int which);
extern int GetPms2dDispType(int quadrant);
extern int get_indepvar_yaxis(int quadrant);
extern int set_indepvar_yaxis(int quadrant, int value);
extern int get_maxsetups(void);
extern int set_maxsetups(int value);
extern int get_plotspec_validity(int entry);
extern int set_plotspec_validity(int entry, int value);
extern int get_valid_setup(int which);
extern int num_of_setups(void);
extern int num_valid_setups(void);
extern int GetSubTypeFromString(int which);
extern int GetDispType(int which);
extern char *GetSubType(int which);
extern char *GetSetupFlightSaved(int which);
extern int SetSetupFlightSaved(int which, char *flt);
extern int SetSetupDateSaved(int which, char *date);
extern char *GetSetupDateSaved(int which);
extern char *GetSetupDescription(int which);
extern char *get_description(int quadrant);
extern int set_description(int quadrant, char *string);
extern int pms1d_window_type(int quadrant);
extern int pms2d_window_type(int quadrant);
extern int xy_window_type(int quadrant);
extern int ListWindowType(int quadrant);
extern int hilite_window_type(int quadrant);
extern int calib_window_type(int quadrant);
extern int set_valid_setups(void);
extern int set_defaults(int quadrant);
extern int find_plotspec_entry(FILE **fp, int entry);
extern int set_argument_mode(char *arg);
extern int init_plotspex(void);
extern char *GetDescriptionFromFile(FILE *File, int skipleadingspaces);
extern int GetFolderIsProtected(void);
extern char *GetFolderPassword(void);
extern int SetFolderPassword(char *password);
extern int SetFolderIsProtected(int value);
extern int ReadInPlotspex(void);
extern int set_window_type(int quadrant, int type);
extern int fill_displays(int direction);
extern int config_display(int quadrant, int disptype, int entry);
extern int get_etc_args(int quadrant, int entry);
extern int StartUpVideo(int quadrant, int videosource);
extern int get_2d_args(int quadrant, int entry);
extern int get_xy_args(int quadrant, int entry);
extern int SetDeletePlotspec(int value);
extern int GetDeletePlotspec(void);
extern char *GetPendingDescription(void);
extern int SetPendingDescription(char *string);
extern int SetNeedPlotspexPassword(int value);
extern int GetNeedPlotspexPassword(void);
extern int GetPlotspexPassword(void);
extern int save_setup(int quadrant);
extern int unlock_spexfiles(char *s);
extern int enter_new_plotspec(int quadrant, int next_entry, int print_desc);
/* pms1d.c */
extern struct quad_info PMS1Dsetup[5];
extern struct accum_info PMS1Daccum[5];
extern int accum_period[4];
extern void InitPMS1Dsetup(void);
extern void ClearAccumulation(int quadrant);
extern void PlotPMS1Ddata(int quadrant, int time_elapsed);
extern int adjust_1d_times(int quadrant, int curr_time);
/* pms1d_ops.c */
extern void TogglePMS1Ddatatype(int quadrant);
extern void TogglePMS1Dvolume(int quadrant);
extern void TogglePMS1DxaxisType(int quadrant);
extern void TogglePMS1DyaxisType(int quadrant);
extern void set_period(int quadrant, char kybdentry[]);
extern int minyrange(int quadrant, char kybdentry[]);
extern int maxyrange(int quadrant, char kybdentry[]);
extern bool isPMS1DprobeSelected(int quadrant, int probenum);
extern void TogglePMS1Dprobe(int quadrant, int probenum);
extern int get_1d_args(int quadrant, int entry);
extern void pmszoom(int quadrant, int klik, int direct);
/* pms1d_util.c */
extern int ProbeColor[];
extern int Get1dFontWidth(int quadrant);
extern int Get1dFontHeight(int quadrant);
extern int Get1dAreaTooSmall(int quadrant);
extern int ymin_ypos(int quadrant);
extern int divider_ypos(int quadrant);
extern int label_1d_ymax(int quadrant, int foregnd, int bkgnd);
extern int label_1d_ymin(int quadrant, int foregnd, int bkgnd);
extern int pms1d_start_time(int quadrant, char curr_time[]);
extern void list_sum(int quadrant, int foregnd, int bkgnd);
extern void x_log10_background(int quadrant);
extern void y_log10_background(int quadrant);
extern void x_counts_background(int quadrant);
extern void PlotPMS1Dbackground(int quadrant);
/* pms1d_xaxis.c */
extern double minx[4];
extern double maxx[4];
extern void ReCalcXaxis(int quadrant);
/* pms2d.c */
extern int disp_type[5];
extern int disp_2d[5][4];
extern int disp_rate[5];
extern str4 p2d_names[4];
extern str4 grey_names[2];
extern str4 hvps_names[2];
extern int num_p2d_probes;
extern int num_grey_probes;
extern int num_hvps_probes;
extern int Get2dFontWidth(int quadrant);
extern int Get2dFontHeight(int quadrant);
extern int Get2dAreaTooSmall(int quadrant);
extern int init_pms2d_parms(int quadrant, int type);
extern int init_2d_graphics(int quadrant);
extern void read_2d_prb_names(void);
extern int get_2d_display_type(int quadrant);
extern int SetNum2dProbes(int quadrant, int num);
extern int NumberPMS2Dprobes(int subtype);
extern int num_pms2d_probes(int quadrant);
extern char *get_2d_probename(int quadrant, int prb_idx);
extern int get_2d_prb_index(int quadrant, char *prb_name);
extern int get_2d_prb_color(char *prb_name);
extern int pms2d_probe_selected(int quadrant, int index);
extern int set_2d_cursor(int quadrant);
extern int select_2d_probe(int quadrant, int index);
extern void select_2d_rate(int quadrant);
extern int pms2d_priority(int quadrant, int op, int index);
extern int update_pms2d_display(int quadrant);
extern void show_setup(int quadrant);
extern char *get_std2d_id_string(P2d_rec *p2d);
extern void show_std2d_hdr(int quadrant, P2d_rec *p2d);
extern void show_grey_hdr(int quadrant, GreyParticle *grey);
/* print_image.c */
extern char *GetPrinterName(int which);
extern char *GetImagePrinterName(int which);
extern char *GetTextPrinterName(int which);
extern char *GetDisabledPrinterName(int which);
extern char *GetEnabledPrinterName(int which);
extern char *GetCurrentTextPrinterName(void);
extern char *GetCurrentImagePrinterName(void);
extern int PrinterNameinPrinterList(char *printername);
extern int PrinterNameinDisabledList(char *printername);
extern int PrinterNameinEnabledList(char *printername);
extern int GetCurrentImageMode(void);
extern int SetCurrentImageMode(int which);
extern int SetCurrentImagePrinter(int which);
extern int GetCurrentImagePrinter(void);
extern int SetCurrentTextPrinter(int which);
extern int GetCurrentTextPrinter(void);
extern int GetTotalNumPrinters(void);
extern int SetTotalNumPrinters(int value);
extern int GetNumImagePrinters(void);
extern int GetNumTextPrinters(void);
extern int GetNumDisabledPrinters(void);
extern int GetNumEnabledPrinters(void);
extern int GetCurrentImagePrinterMode(void);
extern int GetCurrentImagePrinterType(void);
extern int SetPrinterEnabled(int printer, int value);
extern int GetPrinterEnabled(int printer);
extern int SetPrinterType(int which, char *type);
extern int SetPrinterMode(int which, char *mode);
extern int GetPrinterType(int which);
extern int GetPrinterMode(int which);
extern int GetNumPrinterTypes(void);
extern char *GetOrientationName(int which);
extern char *GetBackgroundName(int which);
extern char *GetNumPerPageName(int which);
extern char *GetNumListColName(int which);
extern char *GetImageModeName(int which);
extern char *GetPrinterTypeName(int which);
extern int GetPrinterIndex(char *printername);
extern int ConfigurePrinter(int enabled, char *printername, char *typename, char *modename, char *bkgndname, char *orientname, int numperpage);
extern int GetPrintConfig(void);
extern int GetPrintConfigMode(char *string);
extern int AddSystemPrintersToList(void);
extern int snapshot(int quadrant);
extern int color_snapshot(int quadrant);
extern int print_image_header(int quadrant);
extern int WriteImageFile(int quadrant, int width, int height, int depth, char *data);
extern int PrintTextFile(char *filename);
extern int print_image(int quadrant, int image_type, Drawable xid, int x, int y, int width, int num_rows, int show_msg);
extern int NotifyPrintServer(int quadrant, int image_type);
extern int NotifyPrinter(int quadrant, int printer, char *printmode, char *filename);
/* prt_srvr.c */
extern void catchint(void);
extern int NotifyWINDS(char *message, int exitstatus);
extern int PortServerCleanup(void);
extern int Print80CharLines(int delete, int port, int address);
extern int PjetPrintColorImage(void);
extern int PjetPrintBWImage(void);
extern int graphics_done(char filename[]);
extern int SetPjetPalette(int process);
extern int config_port(int mode);
extern int init_port(char *Port, int baud);
extern int send_reset(void);
extern int init_colors(int size, int bytes);
extern int init_bw(int bytes);
/* psdraw.c */
extern int PSFlushDisplay(void);
extern int PSInitDraw(void);
extern int PSInitMemDraw(Server_image *image, int width, int height, int depth);
extern int PSSetHiliteColors(int c1, int c2);
extern int PSSetContext(Drawable xid, int function, int color, int width, int style, int fid);
extern int PSSetClipping(int x, int y, int width, int height);
extern int PSUnsetClipping(void);
extern int PSGetYOffset(void);
extern int PSGetXOffset(void);
extern int PSSetOffset(int x_offset, int y_offset);
extern int PSFillArea(Drawable xid, int x, int y, int width, int height, int color);
extern int PSContextDrawLine(Drawable xid, int x0, int y0, int x1, int y1, int color, int width, int style);
extern int PSDrawFilledPolygon(XPoint *points, int npoints, int shape, int mode);
extern int PSDrawCircle(int x, int y, int diameter);
extern int PSDrawLine(int xa, int ya, int xb, int yb);
extern int PSLimitCoords(int *xa, int *ya, int *xb, int *yb);
extern int PSDrawDashLine(Drawable xid, int x0, int y0, int x1, int y1, int dash_offset, unsigned char *dash_list, int dash_list_len);
extern int PSContextDrawPolyline(Drawable xid, int numpts, XPoint *list, int color, int width);
extern int PSDrawPolyline(int numpts, XPoint *list);
extern int PSDrawPolypoint(int numpts, XPoint *list);
extern int PSRasterOp(Drawable src_xid, int source_x, int source_y, Drawable dest_xid, int dest_x, int dest_y, int dest_width, int dest_height, int op);
extern int PSMonoRasterOp(Drawable src_xid, int source_x, int source_y, Drawable dest_xid, int dest_x, int dest_y, int dest_width, int dest_height, int op, int color);
extern int PSDestroyImage(void);
extern char *PSGetImage(Drawable xid, int source_x, int source_y, int width, int height);
extern int PSDrawText(int x, int y, char *string);
extern int PSDrawTtext(int x, int y, char *string);
extern int PSGetColorMap(void);
extern int PSSetColorMap(char *which);
extern int PSSetupColors(void);
/* psprint.c */
extern void catchint(void);
extern int NotifyWINDS(char *message, int exitstatus);
extern int PostScriptServerCleanup(void);
extern int GetRGBValue(unsigned int PixelValue, int depth);
extern int GetGreyValue(unsigned int PixelValue, int depth);
extern int CvtWindsRaster2PS(char *InputFilename, int colormode, int window, int port, int address);
extern int IssueLPRequest(int window, int port, int address, char *printer, char *filename);
extern int PrintOutCallParms(int preamble, int CenterPosition, int rows, int columns);
extern int PrintOutWINDSImage(int imagewidth, int colormode, int rows, int cols, int depth, int BlackMap);
/* regress.c */
extern int leastsq(double volt[25], float point[25], int iorder, int npts, float *detn, float *det, float cals[25]);
extern int invdet(float c[25][25], int n, float *dtnrm, float *detm);
extern int mult(float amat[25][25], float bmat[25][25], float cmat[25][25], int nra, int nca, int ncb);
extern int trans(float amat[25][25], float tmat[25][25], int nra, int nca);
extern int coeff(float x[25], int iordr, double x1[25], float y[25], int npts, float *r, float *erms, float *emax);
/* scale.c */
extern int set_need_same_scale(int quadrant, int set);
extern int get_need_same_scale(int quadrant);
extern int get_same_scale(int quadrant);
extern int set_same_scale(int quadrant, int set);
extern double get_same_scale_max(int quadrant);
extern double get_same_scale_min(int quadrant);
extern int set_same_scale_range(int quadrant, double min, double max);
extern int set_scales_same(int quadrant, double min, double max);
extern int force_autoscale(int quadrant);
extern int set_force_autoscale(int quadrant, int value);
extern int auto_scale_if_needed(int quadrant);
extern double get_avg(int quadrant, int seconds, int ptr, int mode_);
/* shmem.c */
extern volatile int *elapsed_time;
extern volatile int *hhmmss;
extern volatile struct SUN_ETH_SHM *eth_shm;
extern volatile float *rawdata, *data, *voltsdata;
extern volatile unsigned short int *bitdata;
extern int *input_pid;
extern int *windComm_pid;
extern int *len_raw;
extern char *raw_list;
extern int *len_derive;
extern char *derive_list;
extern int *nPMS1Dprobes;
extern struct pms1d_probe *PMS1Dprobe;
extern float GetDeriveDataValue(int index);
extern float GetRawDataValue(int index);
extern float GetVoltsDataValue(int index);
extern unsigned short int GetBitDataValue(int index);
extern int GetNumDerivedNames(void);
extern int GetNumRawNames(void);
extern int GetHMS(int index);
extern int GetWINDSElapsedTime(void);
extern int get_time_frame_size(void);
extern int get_datablock_size(void);
extern int set_shmem_size(int size);
extern int get_shmem_size(void);
extern int getmem(char *client, key_t key, int size);
extern int memaddr(int shmid, char *key);
extern int memdetach(char *shmaddr, char *key);
extern int ungetmem(int memid, char *key);
extern int InitTimeStamps(void);
extern int GetProcessPids(void);
extern int set_max_shmem_size(char *client);
extern int wait_on_allocn_sizing(char *client);
extern int write_static_ids(char *host);
extern int read_static_ids(char *host);
extern int write_dynamic_ids(char *client);
extern int read_dynamic_ids(char *client, char *host);
extern int get_ids_static(char *client);
extern int getaddr_static(void);
extern int get_ids_dynamic(char *client);
extern int getaddr_dynamic(void);
extern int detach_shmem(void);
extern int SetRawValue(int which, double value);
extern int SetDerivedValue(int which, double value);
extern char *GetDerivedNameList(void);
extern char *GetRawNameList(void);
extern char *GetDerivedVarName(int which);
extern char *GetRawVarName(int which);
extern int SetDerivedVarName(int which, char *string);
extern int SetRawVarName(int which, char *string);
/* socket.c */
extern char *GetIPCString(char *string);
extern char *GetPortName(int port);
extern int SetBlockTimeOut(int seconds);
extern int listen_on_socket(char *client, int port, int addr);
extern int WaitForSocket(char *client, int port, int addr);
extern int SocketIsBoundForListening(int port);
extern int bind_socket(int port, int address);
extern int SetProtocolDebug(int debug);
extern int GetProtocolDebug(void);
extern char *read_from_socket(int port, int *length, int mode);
extern int talk_to_socket(char *client, int port, int addr, char *host);
extern int make_client_socket(int port, int address, char host[]);
extern int HostIsAlive(char *host);
extern int write_to_socket(int port, char indata[], int length);
extern int close_socket(int port);
extern int PrintResponseToSender(int window, int port, int address, char *hostname, char *buffer);
extern int ConvertIPAddrToName(char *host);
extern void setBrdAddr(int port);
/* startup.c */
extern struct Fl *tp_hdr;
extern int my_pid;
extern int window_x[5];
extern int window_y[5];
extern int window_width[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern int window_height[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern int display_height;
extern int control_height;
extern int control_width;
extern int num_of_printees;
extern int WindsControlHost;
extern int WindsComputeHost;
extern int connected_to_ads;
extern int *is_digital;
extern int time_length;
extern int proj_length;
extern int WINDSCleanUp;
extern int calib_running;
extern Window paint_window[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern Drawable pw_xid[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern char *proj_number;
extern char *DataDirectory;
extern char UserHomeDir[128];
extern char winds_bin_path[128];
extern char WindsHostsPath[128];
extern char winds_helppath[128];
extern char CurrentDate[13*2];
extern char project[13*2];
extern int setup_mode;
extern int FixUpDisplayNames(void);
extern int get_winds_args(int argc, char **argv);
extern int GetGotDataDir(void);
extern int SetGotDataDir(int got);
extern char *GetWinputProgramName(void);
extern int WINDSSetResources(void);
extern int SetFrameLabel(char *message);
extern int SetVarDataBase(int found);
extern int GetVarDataBase(void);
extern char VarAttrsFileName[128];
extern char *GetAttrModProgName(void);
extern char *GetVarAttrsFileName(void);
extern int GetVarAttrs(void);
extern int StartAllWINDSTasks(void);
extern int winds_startup(void);
extern int ConfirmWinputRunning(int restart);
extern int WaitOnDatasetFound(void);
extern char *GetNetCDFFilename(void);
extern int GetTimeInt(int starttime);
extern int GetEndTimeIndex(void);
extern int GetStartTimeIndex(void);
extern int GetDataStartTime(void);
extern int GetDataEndTime(void);
extern char *GetWINDSCmdLine(void);
extern int ShowDatasetMessageAndExit(char *filenames);
extern int makedir(char *prefix, char *suffix);
extern char *GetDisplayHost(void), *GetComputeHost(void);
extern void WINDSInitStuff(int argc, char **argv);
extern char *GetWindsHostsPath(void);
extern int set_project(void);
extern int set_date_string(void);
extern char *GetCurrentFlight(void);
extern char *GetCurrentDate(void);
extern int SetCurrentDate(char *date);
extern char *GetRealTimeDate(void);
extern int init_state_parms(int quadrant, int type);
extern int WINDSGetConstants(void);
extern Notify_value CatchExitSig(Notify_client client, int sig, Notify_signal_mode when);
extern Notify_value CatchCoreDumpSig(Notify_client client, int sig, Notify_signal_mode when);
extern int AdjustBaseFrameDimensions(int nominalwidth, int nominalheight);
extern int SetWINDSDimensions(void);
extern int SetCanvasDimensions(int which, int x, int y, int width, int height);
extern int GetBaseFrameWidth(void);
extern int GetBaseFrameHeight(void);
extern int ResizeWindows(void);
extern int SetTimeWindowWidth(void);
extern int GetTimeWindowWidth(void);
extern int WINDSInitWindows(void);
extern int make_sockets(void);
extern int SetWINDSVersion(void);
extern char *GetWINDSVersion(void);
extern int hide_copyright(void);
extern void draw_copyrite(Canvas cvas, Xv_Window pwindow, Rectlist *area);
extern int ShowTime(void);
extern void show_time(Canvas cvas, Xv_Window pwindow, Rectlist *area);
extern void get_help(Canvas cvas, Xv_Window pwindow, Rectlist *area);
extern int set_quad_size(int which);
extern int VerifyMonitor(int StartMaster);
extern int winds_cleanup(int exit_status);
extern int close_winds_sockets(void);
extern int SetNumWindsNetHosts(int numhosts);
extern int GetNumWindsNetHosts(void);
extern int LoadAverageIsLow(char *host);
extern int GetWindsNetHosts(void);
extern int FindAvailableHost(void);
extern int WINDSSocketBound(char *host);
extern int GetCalibDisplayUp(void);
extern int GetRealTimeVarValues(char *varname, int start, int count, float *values);
/* stats.c */
extern int setpts_width;
extern int setpts_height;
extern struct set_stats *hilited_setpt;
extern int init_accums(void);
extern int SetSetptsDims(void);
extern int init_stats(void);
extern int sum_stats(int indx);
extern int list_setpts(void);
extern int add_setpt(void);
extern int statout(void);
extern int print_set_stat(struct set_stats *member, int op, int top_y);
extern int highlight_setpt_label(int ybot);
extern int clear_setpt_label(int ybot);
extern struct set_stats *find_setpt(int ybottom);
extern int event_in_setpts_window(int quadrant);
extern int current_setpt(int y);
extern int new_list(void);
extern int clear_calcoes(void);
extern int clear_setpts_window(void);
extern int stats_header(void);
extern int relist_points(void);
extern double volt[25];
extern float point[25];
extern int npts;
extern int iorder;
extern int regress_stats(void);
extern int scroll_up(void);
extern int scroll_down(void);
extern int start_calib_curve(void);
extern int redo_last_entry(void);
extern int delete_hilited_entry(void);
extern int delete_setpt(struct set_stats *dead_meat);
extern int save_coords(int x, int y);
extern int redraw_calib_curve(void);
extern int print_entry(void);
/* tasks.c */
extern void start_winds_tasks(void);
extern void kill_winds_tasks(void);
extern void KillWindsPrinterTasks(void);
extern int StartWindsPrinterTasks(int reset);
extern int LogMsgAndExit(char *desthost, char *label, char *message);
extern int SetQCenabled(void);
extern int start_task(int which);
extern void kill_winds_task(int which);
extern char *GetProcessName(int pid);
extern Notify_value bye_bye(Notify_client me, int pid, int *status, struct rusage *rusage);
extern int RestartProcess(int pid);
/* text_ops.c */
extern int set_numeric_val(char *s, int op, int quadrant);
extern int stop_text_op(int quadrant);
extern int start_text_op(int quadrant, int area);
extern char *label_string(int quadrant);
extern Panel_setting text_proc(Panel_item item, Event *event);
extern int display_saved_feedback(int quadrant, int display);
extern int text_op_from_button(int op);
extern int ShowTextItem(int quadrant);
extern int show_text_op(int quadrant, int op, char *string);
extern int UpdateTextObject(int quadrant, char *string);
extern int hide_text_op(int quadrant);
extern int make_text_item(int quadrant);
extern int MakeTextItem(Panel panel, char *string, int minimum, int maximum, int defvalue, int length, void (*proc)(void));
/* timegap.c */
extern void CheckForRealTimeGap(char *prog, Hdr_blk *ADShdr);
/* timer.c */
extern int plot_setup[4];
extern int ElapsedTime;
extern int current_hr;
extern int current_minute;
extern int current_sec;
extern int local_hr[5];
extern int local_minute[5];
extern int local_sec[5];
extern int start_hour;
extern int start_minute;
extern int start_second;
extern int end_hour;
extern int end_minute;
extern int end_second;
extern int need_calib_curve;
extern int need_redo_last;
extern int take_snapshot[5];
extern int take_color_snapshot[5];
extern int time_gone_by[5];
extern char current_time[12];
extern int update_current_time;
extern int ResetCurrentTime(void);
extern int GetWINDSisStarted(void);
extern int SetWINDSisStarted(int value);
extern int disable_timer(Frame _frame);
extern int enable_timer(Frame _frame);
extern int ResizeMenusAndPanels(void);
extern int MakeMenusAndPanels(void);
extern int update_displays(int time_elapsed);
extern int UpdateAndShowDisplay(int quadrant);
extern int ShowNewSetupHintsToUser(int quadrant);
extern int FillQuadrant(int quadrant, int color);
extern int GetAreaTooSmall(int quadrant);
extern int UpdateDisplay(int quadrant);
extern int update_xy_display(int quadrant);
extern int update_pms1d_display(int quadrant, int time_elapsed);
extern int get_pms1d_data(int quadrant);
extern int init_start_time(void);
extern int TimeIsSane(int hour, int minute, int second);
extern int set_current_time_string(int hour, int minute, int second);
extern int set_time(char *newtime);
extern int SetMaxLenTimeWindowString(void);
extern int GetMaxLenTimeWindowString(void);
extern int DrawControlPanelTime(char *newtime);
extern int DrawControlPanelDate(char *date_string);
extern int DrawControlPanelPnum(void);
extern int DrawControlPanelFltno(void);
extern int SetFlightNumber(char *fltno);
extern char *GetFlightNum(void);
extern char *get_fltno(void);
extern int set_fltno(char *fltno);
extern int GotFlightNumber(void);
extern int UpdateSessionTimeFrame(int Starthour, int Startminute, int Startsecond, int Endhour, int Endminute, int Endsecond);
/* vectors.c */
extern int GetVectorFontHeight(int quadrant);
extern int GetVectorFontWidth(int quadrant);
extern int vector_init(int quadrant);
extern int set_y_component(int quadrant, char *y);
extern int set_x_component(int quadrant, char *x);
extern int get_show_vector(int quadrant, int trace);
extern int set_show_vector(int quadrant, int show, int trace, int check);
extern int set_vector_color(int quadrant, int value);
extern int get_vector_color(int quadrant);
extern int set_vector_units(int quadrant, char *varname);
extern char *get_y_component(int quadrant);
extern char *get_x_component(int quadrant);
extern int set_vector_components(int quadrant, char *x, char *y);
extern int set_vector_scale_labels(int quadrant);
extern int draw_vector_scale(int quadrant);
extern int draw_vector_legend(int quadrant, int mode);
extern int GetVectorLabelMargin(int quadrant);
extern int draw_vector_ticks(int quadrant, int mode);
extern int highlight_vector_scale_area(int quadrant);
extern int redraw_vector_scale_area(int quadrant);
extern int event_in_vector_scale_area(int x, int y);
extern int set_max_vector_value(int quadrant, int value);
extern int chg_vector_scale(int quadrant, int direction, int clicks);
extern int SetVectorMaxScale(int quadrant, int value);
extern int GetVectorMaxScale(int quadrant);
extern int get_vector_interval(int quadrant);
extern int set_vector_interval(int quadrant, int value);
extern int vector_time(int quadrant, int vectortime);
extern float vector_scale(int quadrant);
extern int draw_vector(int quadrant, int trace, int derived_point, int raw_point, int xa, int ya);
extern int ChgVectorXComponent(int selection);
extern int ChgVectorYComponent(int selection);
extern int GetBothComponentsSet(int quadrant);
/* VideoErrors.c */
extern char VideoErrorMsg[128];
extern void CheckVideoStatus(void);
extern void ShowAlert(char *msg);
extern int SetVideoErrorStatus(int status);
extern char *GetVideoErrorMsg(void);
/* VideoInit.c */
extern int videowidth;
extern int videoheight;
extern int GetHardwareInfo(void);
extern int VideoInstalledOnHost(void);
extern int videosource;
extern int DestroyVideo(int videosource);
/* VideoOps.c */
extern XImage *GetVideoImage(int videosource);
extern int DestroyVideoImage(void);
extern int GetVideoLive(int videosource);
extern void SetVideoLive(int videosource, int live);
extern int GetVideoChannel(int videosource);
extern void SetVideoChannel(int videosource, int newchannel);
extern int GetFirstChannelValue(void);
extern int GetSecondChannelValue(void);
extern int GetVideoHeight(void);
extern int GetVideoWidth(void);
extern int GetVideoHardware(void);
/* windsops.c */
extern Canvas canvas[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern int window_type[5 +1 +4 +4 +4 +3 +2 +1 +6 +1 - 1];
extern int CheckArrayBound(char *client, int arraysize, int arraytypesize, int index);
extern Canvas GetWINDSCanvas(int quadrant);
extern int SetWINDSShowWindow(int quadrant, int show);
extern int SetWINDSSnapshot(int quadrant, int snap);
extern int SetWINDSColorSnapshot(int quadrant, int snap);
extern int GetWINDSWindowWidth(int quadrant);
extern int GetWINDSWindowHeight(int quadrant);
extern int GetWINDSWindowX(int quadrant);
extern int GetWINDSWindowY(int quadrant);
extern int GetWINDSWindowType(int quadrant);
extern char *GetWINDSProjectName(void);
extern char *GetWINDSAircraftName(void);
/* xdraw.c */
extern Display *win_display;
extern Cms cms;
extern XColor *xcolors;
extern int index_offset;
extern int cms_size;
extern int X11FlushDisplay(void);
extern int X11InitDraw(void);
extern int X11InitMemDraw(Server_image *image, int width, int height, int depth);
extern int X11SetHiliteColors(int c1, int c2);
extern int X11SetContext(Drawable xid, int function, int color, int width, int style, int fid);
extern int X11SetClipping(int x, int y, int width, int height);
extern int X11UnsetClipping(void);
extern int X11GetYOffset(void);
extern int X11GetXOffset(void);
extern int X11SetOffset(int x_offset, int y_offset);
extern int X11FillArea(Drawable xid, int x, int y, unsigned int width, unsigned int height, int color);
extern int X11ContextDrawLine(Drawable xid, int x0, int y0, int x1, int y1, int color, int width, int style);
extern int X11DrawFilledPolygon(XPoint *points, int npoints, int shape, int mode);
extern int X11DrawCircle(int x, int y, unsigned int diameter);
extern int X11DrawLine(int xa, int ya, int xb, int yb);
extern int X11LimitCoords(int *xa, int *ya, int *xb, int *yb);
extern int X11DrawDashLine(Drawable xid, int x0, int y0, int x1, int y1, int dash_offset, char dash_list[], int dash_list_len);
extern int X11ContextDrawPolyline(Drawable xid, int numpts, XPoint *list, int color, int width);
extern int X11DrawPolyline(int numpts, XPoint *list);
extern int X11DrawPolypoint(int numpts, XPoint *list);
extern int X11RasterOp(Drawable src_xid, int source_x, int source_y, Drawable dest_xid, int dest_x, int dest_y, unsigned int dest_width, unsigned int dest_height, int op);
extern int X11MonoRasterOp(Drawable src_xid, int source_x, int source_y, Drawable dest_xid, int dest_x, int dest_y, unsigned int dest_width, unsigned int dest_height, int op, int color);
extern int X11DestroyImage(void);
extern char *X11GetImage(Drawable xid, int source_x, int source_y, unsigned int width, unsigned int height);
extern int X11DrawText(int x, int y, char *string);
extern int X11DrawTtext(int x, int y, char *string);
extern int X11GetColorMap(void);
extern int X11SetColorMap(char *which);
extern int X11SetupColors(void);
extern int RepaintPanel(Panel panel, int width, int height, int color);
/* xv_errors.c */
extern int xview_error_proc(Xv_object object, Attr_avlist avlist);
extern int xlib_error_proc(Display *dpy, XErrorEvent *event);
/* xview.c */
extern int CreateBaseFrame(char label[]);
extern Frame GetBaseFrame(void);
extern Display *GetBaseFrameDisplay(void);
extern int GetBaseFrameDamage(void);
extern int CreateSubFrame(int which, char label[]);
extern Frame GetSubFrame(int which);
extern int CenterWindow(int centered, int border);
extern Window GetWindowXID(int window);
extern int SetWindowX(int window, int xposn);
extern int SetWindowY(int window, int yposn);
extern int GetWindowX(int window);
extern int GetWindowY(int window);
extern int SetWindowHeight(int window, int height);
extern int SetWindowWidth(int window, int width);
extern int GetWindowHeight(int window);
extern int GetWindowWidth(int window);
extern int SizeWindowWidthToFitContents(int window);
extern int SizeWindowHeightToFitContents(int window);
extern int SizeWindowToFitContents(int window);
extern int SetWindowVisible(int window, int show);
extern int GetMousePosnY(int window);
extern int GetMousePosnX(int window);
extern int SetMousePosn(int window, int x, int y);
extern int SetWait3Func(Notify_value (*func)(void), int pid);
extern int SetKeyboardFocus(int window);
extern int XSetAttr(int object, ...);
extern int XGetAttr(int object, ...);
extern int XCreateObject(int parent, void *objtype);
/* xy_menus.c */
extern int ClearMenuList(void);
extern int AddToMenuList(int totalnames, char *namelist, int mode);
extern int GetNumMenuEntries(void);
extern int GetMenuListAttrIndex(int entry);
extern int GetMenuListIndex(int entry);
extern int GetMenuListMode(int entry);
extern char *GetMenuListTitle(int entry);
extern char *GetMenuListName(int entry);
extern char *GetMenuListCategory(int entry);
extern int SetMenuListCategory(char *varname, char *category);
extern int GetMenuListPosn(char *varname);
extern int InitMenuList(void);
extern int make_winds_menus(void);
extern int SortMenuList(void);
extern int TraceIsDeletable(int quadrant);
extern int SetVarCategories(void);
/* xy_plt.c */
extern int setup_xyplot(int quadrant);
