/* Added by Chris.
 */
#include "header.h"
#include "constants.h"


#ifdef __cplusplus
extern "C" {
#endif

float   *SetPMS1DnetCDF(char [], int);

/* chost.c */
extern int SetComputeHost(void);
extern char *GetComputeHost(void);
extern char *GetDisplayHost(void);
/* date.c */
extern int init_date(void);
extern char *get_month(void);
extern int GetMonthNum(char *month);
extern int get_month_num(void);
extern char *get_day(void);
extern char *get_year(void);
extern char *GetTime(void);
extern char *get_date(void);
extern char *GetYYMMDDfromBase(long basetime);
extern char *get_date_from_base(long base);
extern char *get_time_from_base(long base);
extern int GetTimeIntFromHMS(int hr, int min, int sec);
extern int GetTimeIntFromBase(long base);
extern int GetBaseFromMDYHMS(int month, int day, int year, int hr, int min, int sec);
extern int hms2sec(int hr, int minut, int sec);
extern int sec2hms(int total, int *hr, int *minut, int *sec);
extern int next_end_period(int total, int interval);
extern int last_start_period(int total, int rate, int interval);
/* getmem.c */
extern void *GetMemory(size_t nbytes);
/* strupr.c */
extern char *strupr(char s[]);
extern char *strlower(char s[]);
/* util.c */
extern char *ResizeMem(void *memptr, int size);
extern char *substring(char *s, int c);
extern int nindex(char *s, int c);
extern char *ReplaceStringWithChar(char *string, char *target, int substitute);
extern int GetNumCharInString(int c, char *s);
extern char *ReplaceChar(char *string, int target, int substitute);
extern char *StripLeadingBlanks(char *s);
extern char *TrimTrailingBlanks(char *s);
extern int last_blank(char *s, int maxlen);
extern int trim_trailing_blanks(char *s, int len);
extern int concatenate_(char *s1, char *s2);
extern int null_terminate_(char *s, int *pos);
extern int trim_trailing_digits(char *s, int precision, int retain_decimal);
extern int SetAlarmTimer(int usecs);
extern int SetCurrentDir(char *dir);
extern char *GetCurrentDir(void);
extern char *GetUnixCleanFilename(char *string);
extern int trim_trailing_zeros(char *s);
extern FILE *WINDSfopen(char filename[], char mode[]);
extern int WINDSfclose(FILE *filehandle);
extern char *GetNextRecord(int length, FILE *handle, int truncate);
extern int WINDSShowFiles(void);
extern char *GetCoreSignalName(int sig);
extern char *GetExitSignalName(int sig);
extern int GetNumberExitSignals(void);
extern int GetNumberCoreSignals(void);
extern int GetCoreSignal(int signal);
extern int GetExitSignal(int signal);
extern int FileExists(char *filename);
extern int FileSize(char *filename);
extern int FileIsSymLink(char *filename);
extern int TimeOfLastUpdate(char *filename);
extern int TimeSinceLastUpdate(char *filename);
extern int SwapSpaceLeft(void);
extern int DiskSpaceLeft(char *filesystem);
extern int CreateOrTouchFile(char *filename);
extern int CreateFile(char *filename);
extern int TouchFile(char *filename);
extern int SetThreshold(int threshold);
extern int GetThreshold(void);
extern int SaveIfLarger(char *filename);
extern char *ListFilesLargerThan(int threshold, char *directory);
extern char *GetHostName(void);
extern int LogToStdErr(char *msg);
extern char *GetTimeStamp(void);
extern char **GetDirectoryNames(char *parentdir);
extern int FindFiles(char *filename, char *directory, int (*opfunc)(void), int (*errorfunc)(void), int lengthcmp);
extern int IsDirectory(char *pathname);
extern char *GetFileDate(char *filename);
extern int ExecuteShellCommand(char *command);
extern char *GetShellOutput(char *command, int (*reportfunc)(void));
extern int LogMsgToStdErr(char *msg);
extern int LogMsgToStdOut(char *msg);
extern int LogMsgToConsole(char *host, char *source, char *message);
extern char *GetFileType(char *filename);
extern char *GetCoreType(char *filename);
extern char *ShowWINDSStack(char *filename);
extern int MoveFile(char *source, char *dest);
extern int MountingFromNFSServer(char *server);
extern int ListLimits(void);
extern int LeftJustify(char *string, char *target, int fieldlen);
extern int PadWithBlanks(char *string, int length);
extern int GetStringPosition(void);
extern int SetStringPosition(int posn);
extern char *GetNextString(int *posn, char *record);
extern char *GetNextToken(int *posn, char *record, char *delimiter);
extern int StringInList(char *string, char *list[], int numlistwords);
extern int StringInString(char *s1, char *s2, int caps);
extern int StringCompare(char *s1, char *s2);
extern int StringLength(char *string);
extern char *TruncateString(char *s1, char *s2);

/* config_mgmt.c */
extern FILE *config_file;
extern int open_config_file(void);
extern int get_config_parm(int parm);
/* hdr_wrap.c */
extern int InitHeader(char *hdr_file);
extern int find_var(char *varname);
extern char *hdr_fltno(void);
extern char *hdr_date(void);
extern struct Fl *GetHeader(void);
extern int read_hdr(int fd, struct Fl *hdr_ptr);
extern int is_digital_type(char *type);
/* ipc.c */
extern int SetListeningPost(char *client, int port, int addr);
extern int SetupWindsListening(char *client);
extern int SetupWindsBroadcast(char *client);
extern int CloseWindsBroadcast(void);
extern int CloseWindsListening(void);
extern int GetResponseToNetRequest(void);
extern int SetResponseToNetRequest(int value);
/* netcdf.c */
extern int error_response(char *cdfcall, long severity);
extern int OpenNetCDFFile(char *path, int notifyuser);
extern int dataset_init(void);
extern int GetNetCDFVarValues(char *varname, long start, long numvalues, void *values);
extern int get_netcdf_dataset_size(void);
extern int GetLastTimeOffset(void);
extern int get_num_netcdf_vars(void);
extern int set_BASETIME(void);
extern int get_netcdf_end_time(void);
extern int get_netcdf_start_time(void);
extern int get_netcdf_fileposn(void);
extern char *get_netcdf_date(void);
extern char *get_netcdf_varnames(char *namelist, long namelen);
extern int SetDataPtr(int index, unsigned int address);
extern int get_netcdf_data(long *timeptr, float *dataptr, long start, long numslices, long update_rate);
extern int get_BASETIME(void);
/* netconfig.c */
extern char display_mode[128];
extern char display_pnum[128];
extern char display_file[128];
extern char color_map[128];
extern int open_netconfig(void);
extern int close_netconfig(void);
extern int skip_doc_lines(void);
extern int get_num_winds_sessions(void);
extern int set_winds_sessions(char *client, char *pnum, char *computehost, char *disphost);
extern int set_session(char *client, char *host, int number);
extern char *get_display_host(int session);
extern int get_session_number(char *host);
extern int get_display_number(int session);
extern int get_netconfig_entry(char hostname[], char mode[], char pnum[], char file[]);
extern int get_entry_by_locn(char locn[]);
extern int get_entry_by_name(char hostname[]);
extern int GetScreenWidth(void);
extern int GetScreenHeight(void);
extern int SetScreenDimensions(int width, int height);
extern int SetScreenGeometry(void);
extern int set_num_displays(void);
extern int get_num_displays(void);
extern char *set_proj_no(void);
extern char *get_pp_filename(void);
extern int post_processing_locn(char locn[]);
extern int post_processing_mode(void);
extern char *get_proj_number(void);
extern int IsWindsSlave(char locn[]);
extern int IsWindsComputeHost(char host[]);
extern int IsWindsControlHost(char host[]);
extern int FindAndSetControlHost(void);
extern int SetControlHost(char host[]);
extern char *GetControlHost(void);
extern char *get_disp_locn(void);
extern int flat_panel_display_data_needed(void);
extern int lcd_display(void);
extern int flip_display(void);
extern int AsciiDataNeeded(void);
extern int UsingNonLocalPortServer(void);
extern int GetInputMode(void);
extern int SetInputMode(void);
extern int init_setup_mode(void);
extern int netcdf_mode(void);
extern int DiskDataToNetCDF(void);
extern int rawdata_from_disk(void);
extern int data_from_ads(void);
extern char *get_disp_host(void);
extern int get_printer(char port[]);
extern char *SaveDir;
extern int SetSaveDirectory(void);
extern char *GetSaveDirectory(void);
extern char *get_port_server_host(void);
extern int set_port_server_host(void);
extern int set_printer_ports(void);
extern int get_bw_image_port(void);
extern int set_bw_image_port(void);
extern int SetNeedPauseOnLists(int pause);
extern int GetNeedPauseOnLists(void);
extern int SetNumPrintRows(int rows);
extern int GetNumPrintRows(void);
extern int get_color_image_port(void);
extern int set_color_image_port(void);
extern int get_lstat_port(void);
extern int set_lstat_port(void);
extern char *GetDefaultProjDir(void);
extern int SetFlushOnImagePrint(int flush);
extern int GetFlushOnImagePrint(void);
extern int SetResetOnStartup(int reset);
extern int GetResetOnStartup(void);
extern int SetDisplayMode(char mode[]);
extern char *GetDisplayMode(void);
extern char *GetWINDSServer(void);
extern char *GetProjectNumberFromFile(void);
extern int NotifyWINDSProcess(char message[]);
/* shmem.c */
extern volatile int *elapsed_time;
extern volatile int *hhmmss;
extern volatile struct SUN_ETH_SHM *eth_shm;
extern volatile float *rawdata, *data;
extern volatile unsigned short int *bitdata;
extern volatile float *voltsdata;
extern volatile char *ADSrecord, *AVAPSrecord[];
extern float *SampledData, *AveragedData;
extern int *input_pid;
extern int *windComm_pid;
extern int *len_raw;
extern char *raw_list;
extern int *len_derive;
extern char *derive_list;
extern int *nPMS1Dprobes;
extern struct pms1d_probe *PMS1Dprobe;
extern float GetDeriveDataValue(int index);
extern float GetRawDataValue(int index);
extern float GetVoltsDataValue(int index);
extern unsigned short int GetBitDataValue(int index);
extern int GetNumDerivedNames(void);
extern int GetNumRawNames(void);
extern int GetHMS(int index);
extern int GetWINDSElapsedTime(void);
extern int get_time_frame_size(void);
extern int get_datablock_size(void);
extern int set_shmem_size(int size);
extern int get_shmem_size(void);
extern int getmem(char *client, key_t key, int size);
extern int memaddr(int shmid, char *key);
extern int memdetach(char *shmaddr, char *key);
extern int ungetmem(int memid, char *key);
extern int InitTimeStamps(void);
extern int GetProcessPids(void);
extern int set_max_shmem_size(char *client);
extern int wait_on_allocn_sizing(char *client);
extern int write_static_ids(char *host);
extern int read_static_ids(char *host);
extern int write_dynamic_ids(char *client);
extern int read_dynamic_ids(char *client, char *host);
extern int get_ids_static(char *client);
extern int getaddr_static(void);
extern int get_ids_dynamic(char *client);
extern int getaddr_dynamic(void);
extern int detach_shmem(void);
extern int SetRawValue(int which, double value);
extern int SetDerivedValue(int which, double value);
extern char *GetDerivedNameList(void);
extern char *GetRawNameList(void);
extern char *GetDerivedVarName(int which);
extern char *GetRawVarName(int which);
extern int SetDerivedVarName(int which, char *string);
extern int SetRawVarName(int which, char *string);
/* socket.c */
extern char *GetIPCString(char *string);
extern char *GetPortName(int port);
extern int SetBlockTimeOut(int seconds);
extern int listen_on_socket(char *client, int port, int addr);
extern int WaitForSocket(char *client, int port, int addr);
extern int SocketIsBoundForListening(int port);
extern int bind_socket(int port, int address);
extern int SetProtocolDebug(int debug);
extern int GetProtocolDebug(void);
extern char *read_from_socket(int port, int *length, int mode);
extern int talk_to_socket(char *client, int port, int addr, char *host);
extern int make_client_socket(int port, int address, char host[]);
extern int HostIsAlive(char *host);
extern int write_to_socket(int port, char indata[], int length);
extern int close_socket(int port);
extern int PrintResponseToSender(int window, int port, int address, char *hostname, char *buffer);
extern int ConvertIPAddrToName(char *host);
extern void setBrdAddr(int port);
/* timegap.c */
extern void CheckForRealTimeGap(char *prog, Hdr_blk *ADShdr);

#ifdef __cplusplus
}
#endif

/* brdcst.c */
extern void ReadBroadcastVariables(void);
extern void EnableBroadcasting(void);
extern void DisableBroadcasting(void);
extern int BroadcastSyncData(void);
/* winputops.c */
extern int FlightDate[3];
extern int recs_read;
extern int recs_to_read;
extern int first_frame_seconds;
extern int start_hr;
extern int start_sec;
extern int update_rate;
extern int total_seconds;
extern struct itimerval itimeit;
extern long LRlen;
extern void DoDataInitStuff(void);
extern void LoopAndGetDataToShmem(void);
extern void DoWinputInitStuff(void);
extern void InitRawDataMode(void);
extern void check_for_midnite(long offset);
extern int set_start_date(int index);
extern int get_day_of_year(long basetime);
extern int get_disk_sdirec(void);
extern int adjust_netcdf_start_time(void);
extern bool NoStartFlagFileExists(void);
extern void catchalrm(int s);
extern void update_data_history(int inputmode);
extern bool get_data(void);
extern void FormatTimeSegmentsForOutputFile(char *buff);
extern void Cleanup(int s);
extern void catchint(int s);
extern void cleanup(void);
extern void InitAircraftDependencies(void);
extern void parcel_reset(int num);
extern void HandleError(char *s);
extern void LogMessage(char *s);
extern char *ExtractHeaderIntoFile(char *fileName);
/* winput-startup.c */
extern bool QCenabled;
extern char *ProjectDirectory;
extern char header_filename[128];
extern int Debug;
extern int refill_shmem;
extern int Freeze;
extern void SetInputRate(int value);
extern int GetInputRate(void);
extern void RunStandardWINDSLoop(void);
extern void DoWinputStartupStuff(char **argv, int argc);
extern char *GetNetcdfFileName(void);
extern void SetInputSource(int inputmode);
extern void AppendToSearchPath(char *pathname);
extern void DoWinputShmemStuff(void);
extern void InitNetCDFMode(int freeze);
extern void FinishDataInitStuff(void);
extern void NotifyWINDS(char *message, int exitstatus);
extern int GetNumberOfRawVars(void);
extern int GetNumberOfDerivedVars(void);
extern void SetNumberOfRawVars(int num);
extern void SetNumberOfDerivedVars(int num);
extern void FinishWinputShmemStuff(void);
extern int IsDatasetFound(void);
extern void SetDatasetIsFound(int found);
extern void NotifyDatasetFound(void);
extern int GetShmemElapsedTime(void);
extern void SetShmemElapsedTime(int elapsedtime);
extern void get_args(int argc, char **argv);
extern char *proj_number;
