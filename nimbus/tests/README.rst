
======================
NIMBUS tests directory
======================

This is an explanation of the NIMBUS tests in this directory, their
variations, and how to run them.

------------------------
Generating Documentation
------------------------

The source documentation uses ReStructured Text formatting.  It can be
converted to HTML like so::

    rst2html README.rst README.html

Or using scons::

    scons -u html

The source documentation for Sphinx is in the `doc/source` directory, and
the html target generates full documentation in HTML which can be browsed
from this file:

  doc/html/index.html


-------------
Running Tests
-------------

There are two types of tests: a unit tests executable ``nimbus_tests``
using the `Google unit testing framework
<https://github.com/google/googletest>`_, and a series of test cases for
comparing the output from the production and development versions of
``nimbus``.

All of the tests are automated by targets in the ``SConscript`` file.  They
can be selected individually or run all at once, and some of them can also
be run under valgrind for extended diagnostics.

The unit tests alone can be run with the *test* alias::

  scons -u test

The comparison tests can be run separately using the alias
*<project>-xdiff*, or all of them can be run with just *xdiff*::

  scons -u winter-xdiff
  scons -u ideas-xdiff
  scons -u xdiff
  
All of the tests, both unit tests and output comparison tests, can be run
with a single alias *xtest*::

  scons -u xtest

The tests depend upon some important SCons configuration variables,
particularly the comparison tests.  The nimbus production version is
located using the *JLOCAL_PROD* variable setting.  Set *JLOCAL_PROD* to the
RAF installation prefix, then the production NIMBUS path will be
``JLOCAL_PROD/bin/nimbus``.  This should be distinct from the *JLOCAL*
variable specifying where nimbus would be installed, otherwise the
production nimbus might be inadvertently overwritten by the development
version, making the comparison tests useless.  If NIMBUS should be built
against a different NIDAS installation, such as a version under
development, then that path can be specified in *NIDAS_PATH*.

Below is an example ``config.py`` file that would be written in the nimbus
``SConstruct`` directory::

  NIDAS_PATH="/opt/local/nidas"
  JLOCAL_PROD="/opt/local/raf"
  JLOCAL="/opt/local/raf-dev"

Unfortunately, running nimbus in batch mode still requires a X11 display.
For interactive console development, scons can pass the DISPLAY environment
variable to the nimbus processes.  However, this does not work for remote
shell sessions or real batch testing, so a virtual X11 server is used
instead.  The eol_scons xvfb tool runs Xvfb and sets the DISPLAY
environment variable so nimbus can connect to it.

----------
Unit Tests
----------

The unit tests are divided into these source files.

^^^^^^^^^^^^^^^^^^^^^^^^
``test_Interpolator.cc``
^^^^^^^^^^^^^^^^^^^^^^^^

Test the ``Interpolator`` class which wraps the GSL spline routines to
handle extrapolation cases.

^^^^^^^^^^^^^^^^^^^^^^^^
``test_parseInt.cc``
^^^^^^^^^^^^^^^^^^^^^^^^

Test the ``parseInt()`` function used to extract latch times from variable
list files.

^^^^^^^^^^^^^^^^^^^^^^^^
``test_sync_reader.cc``
^^^^^^^^^^^^^^^^^^^^^^^^

This is the real bulk of the unit testing, since it tests the sync records
interface provided by the ``sync_reader.cc`` module.

There are two *NidasProject* tests: *SerialNumbers* checks that the correct
serial numbers can be retrieved from the nidas xml file, while
*AircraftTest* tests the ``Aircraft::getAircraft()`` API added to NIDAS.

Then there are two *SyncReaderTest* tests: *CheckCurrentCalCoefficients*
and *CompareHeaderAndRecords*.  These tests work by starting up a sync
reader and then checking for expected values in the data and metadata (such
as calibration coefficients).

The *CompareHeaderAndRecords* test is the most complicated.  It compares
the header and the records from a sync record stream against a pre-recorded
sync record stream.  The known good sync record stream is generated from
``sync_dump`` and saved as JSON using the ``-j`` option.  This JSON stream
can then be read back in by the test and compared against the sync record
stream generated by NIMBUS.

NIMBUS reads sync records either from a DSM server in real-time or from a
raw data file in post-processing, so the *SyncReaderTest* tests are
instantiated for both cases.  The real-time test runs ``sync_server`` to
generate sync records, and then NIMBUS reads them from a pipe.  This is not
quite equivalent to real-time.  In real-time on the aircraft server, the
sync records are streamed over the network to localhost port 30001 instead
of through a pipe.  Also, the sorter lengths are much shorter in real-time.
To simulate real-time sorter lengths with ``sync_server``, these
command-line options need to be added: ``--procsorterlength 1.0
--rawsorterlength 0.25``.  However, that would complicate the tests because
there would be two different pre-recorded record streams, since the
different sorter lengths changes the values in the records.  Perhaps that
is something that should be handled more accurately someday.

The post-processing test instances use the SyncServer embedded in NIMBUS
rather than a separate sync_server process.

The JSON archive can be updated using ``scons -u updatetestdata``.


---------------------
Test Case Comparisons
---------------------

The SConscript includes test cases for running NIMBUS, each with a project,
flight number, raw data file, and start and end times.  Then for each
project, a copy of the project's configuration directory is included under
the ``projects`` subdirectory.  The configuration directories are actually
branches of the production configurations, so the test configurations can
be more stable and change only in step with the tests themselves.

The comparisons work by creating NIMBUS setup files for each case for each
NIMBUS version, one an installed production version and one the development
version in the current source tree.  The setup files specify a different
netcdf output file for each, then the scons builders can compare the netcdf
files with ``nc_compare``.  If both versions of NIMBUS produce identical
netcdf output, then the test passes.

Before the enhancements to ``nc_compare``, the netcdf files dumped to text
with ``ncdump -p 6`` and then compared with ``diff``.  The ``-p`` option
specifies the number of significant digits to be printed for floating point
numbers.  Using ``nc_compare`` allows for more careful comparison of
floating point values and can give better diagnostics when there are
differences.

Obviously the comparisons are not meaningful unless the production version
of NIMBUS is known to be correct and distinct from the development version.

----------------
SCons Tools
----------------


^^^^^^^^^^^^^^^^
NimbusSetup
^^^^^^^^^^^^^^^^

The python module ``NimbusSetup.py`` defines the class ``NimbusSetup`` for
creating and manipulating NIMBUS setup files.  It does not depend upon
SCons at all, and it has its own python tests which can be run like so::

  py.test NimbusSetup.py


^^^^^^^^^^^^^^^^
nimbus.py
^^^^^^^^^^^^^^^^

This is a scons tool which integrates the NimbusSetup class and other
NIMBUS builders into the SCons Environment.  The ``BatchNIMBUS()`` method
can be used to create a builder to run NIMBUS against an instance of a
NimbusSetup configuration, with or without the valgrind integration.  It
also defines helpers for comparing NIMBUS netcdf output.

^^^^^^^^^^^^^^^^
xvfb
^^^^^^^^^^^^^^^^

This tool runs Xvfb around nimbus actions, so that nimbus can connect to an
X server.  Unfortunately, a different Xvfb process is started for each
nimbus run, but the overhead probably is negligible.


----------------
Raw Data Cache
----------------

Rather than keep large raw data files in the repository, the SConscript
tests use the ``datafilecache`` tool to download raw data files and
maintain them in a cache directory.  By default this cache directory is in
the top-level SConstruct directory and called ``DataCache``, but alternate
locations can be added to the cache path if the files have been downloaded
elsewhere already.

When the tests run, if the raw data file does not already exist on the
cache path, then scons attempts to download the raw data file into the
first directory on the cache path which exists.  So for example, the
``#/DataCache`` default will not created or used at all if
``~/Data/raf/Raw_Data`` already exists.  The downloads use a ssh host alias
called *rafdata*, so that alias must exist and refer to an EOL host like
*barolo*, and obviously the host must be reachable, ie, no firewalls in the
way.

The cache can be refreshed at any time with the *datasync* alias and the
*download* option.  The *datasync* alias just makes sure all the cached
data files exist and downloads them if not, while the *download* option can
be used to force synchronization even if the data file already exists in
the cache::

  scons -u datasync download=force

If the raw data file changes, then any NIMBUS builders which use it will
then be outdated.

Note that synchronizing the data files can take several minutes even if
they are already updated locally, because rsync computes checksums on both
sides to verify the local copy is correct.


----------------
Valgrind
----------------

Several of the scons targets are instrumented using the ``valgrind`` tool.
There are aliases to run ``nimbus_tests`` with either the memcheck tool or
the helgrind threading tool::

  scons -u memcheck
  scons -u threadcheck

The valgrind output is written into a corresponding log file, such as
``memcheck.vg.log``, and the builder parses the log file and fails if there
are errors or definite memory leaks.

The test case comparisons can run valgrind on the development NIMBUS
version, but valgrind is off by default::

  scons -u winter-xdiff valgrind=on

In the example above, the valgrind output is written to
``WINTER/WINTER_rf03_actual.vg.log``.


------------------------
Comparing Whole Projects
------------------------

The NIMBUS tests directory also contains a python script called
`pnimbus.py` which can be used to run NIMBUS on a whole project's worth of
raw data, and then compare the netcdf output against some known good
output.

^^^^^^^^^^^^^^^
Usage
^^^^^^^^^^^^^^^

Pass the `--help` option to see all the usage info::

    Usage: pnimbus.py [options] {operation ...} [flight ...]

    The named operations will be run for all the flights named by setup files
    in the <setup> directory, or else only the flights listed after the
    operations.  These are the available operations:

      nimbus:

	Run NIMBUS on the setup files in the given production directory but
	with the output redirected to the specified output directory.

      reorder:

	Run just ncReorder on the output files.  The 'nimbus' operation runs
	ncReorder automatically when the nimbus program succeeds.

      process2d:

	Run process2d for the project flights, looking for the 2d input file
	corresponding to the flight from the setup file.

      compare: 

	Compare the netcdf files in the output directory with the output
	specified in the original setup files.

      diff:

	Run diff on the nimbus output logs.  This is not necessarily possible
	except when comparing against a base project (see --base), since
	otherwise there are no log files.

      flights:

	List the flights for all of the setup files loaded for this project.

    Modified setup files and netcdf output files will be written to the current
    directory by default, or to the directory named by the --output option.

    Options:
      -h, --help         show this help message and exit
      --debug            
      --info             
      --error            
      --dryrun           Load configuration and echo steps but do not run any
			 commands.
      --setup=SETUP      Path to directory of setup files, typically the
			 Production directory of a project configuration.
      --project=PROJECT  Specify project name to derive a setup path using the
			 Production directory of a project configuration.
      --output=OUTPUT    Set output directory for netcdf files and modified setup
			 files.
      --compare=COMPARE  Look for primary netcdf files in this directory, to be
			 compared against the netcdf files in the output
			 directory.
      --nimbus=NIMBUS    Alternate path to nimbus executable.
      --base             Generate a 'base' project from this project which uses
			 the standard nimbus on the path, and compare this project
			 against the output of that base project.  In other words,
			 rather than compare against existing 'production' netcdf
			 output files, create the production files directly with
			 this script using the installed nimbus (the one on the
			 PATH), then compare those files with the output of this
			 same script but run with the alternate nimbus path.


^^^^^^^^^^^^^^^^^^^^^^
Specifying the project
^^^^^^^^^^^^^^^^^^^^^^

The `pnimbus.py` script needs to know which project it is processing and
where to find the raw data files.  Typically the raw data files are located
by discovering all the setup files in the project's Production directory,
and those in turn can be discovered in a two ways: specify the full path to
the Production directory, or specify the project name and look for the
project's configuration directory under the PROJ_DIR environment setting.
The examples below use the 'flights' operation to just verify that the
configuration loads correctly.

Using `--project`::

      barolo|139|% echo $PROJ_DIR
      /net/jlocal/projects
      barolo|140|% ./pnimbus.py --project=CSET flights
      Flights: ff01 rf01 rf02 rf03 rf04 rf05 rf06 rf07 rf08 rf09 rf10 rf11 rf12 rf13 rf14 rf15 rf16

Using `--setup`:

      barolo|141|% ./pnimbus.py --setup /net/jlocal/projects/CSET/GV_N677F/Production flights
      Flights: ff01 rf01 rf02 rf03 rf04 rf05 rf06 rf07 rf08 rf09 rf10 rf11 rf12 rf13 rf14 rf15 rf16


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Generating output for a project
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

With the project configuration found and loaded, `pnimbus.py` can be used
to run nimbus processing steps on any or all of the flights in a project,
with the output being directed either to the current directory or to a
directory named with the `--output` option.

For each flight, `pnimbus` writes a modified setup file to the output
directory and then runs `nimbus` in the background with that setup file.
To run NIMBUS in the background, it must connect to a separate Xvfb session
started and stopped by `pnimbus`.  The standard output from NIMBUS is
logged to a file in the output directory named after the setup file being
run.

If nimbus exits without an error, then `ncReorder` is run automatically on
the output file.

This example runs NIMBUS on the CSET project, but only for flight `rf10`::

      barolo|143|% mkdir CSET
      barolo|144|% ./pnimbus.py --info --setup /net/jlocal/projects/CSET/GV_N677F/Production --output CSET nimbus rf10
      Using site_tools: /h/eol/granger/.scons/site_scons/eol_scons/tools
      Xvfb -displayfd 4
      Looking for available displays...Ignore errors about servers already running.
      INFO:NimbusProject:nimbus -b CSET/setup_rf10 >& CSET/setup_rf10.log
      INFO:NimbusProject:ncReorder CSET/CSETrf10.nc /tmp/tmp_Awijl/CSETrf10.nc
      99%
      INFO:NimbusProject:mv /tmp/tmp_Awijl/CSETrf10.nc CSET/CSETrf10.nc


^^^^^^^^^^^^^^^^^^^^^^^^^^
Comparing project output
^^^^^^^^^^^^^^^^^^^^^^^^^^

The output generated by the `pnimbus.py` script can be compared against
other nimbus runs, either production data in the standard locations or
output data generated by the `pnimbus.py` script with alternate versions of
nimbus.

By default `pnimbus.py` tries to locate and compare against existing
production data, as shown in this example::

      barolo|145|% ./pnimbus.py --info --setup /net/jlocal/projects/CSET/GV_N677F/Production --output CSET compare rf10
      INFO:NimbusProject:nc_compare /scr/raf_data/CSET/CSETrf10.nc CSET/CSETrf10.nc
      --- /scr/raf_data/CSET/CSETrf10.nc (left)
      +++ CSET/CSETrf10.nc (right)
      variables:
	 Variable              Left Mean     Right Mean    Abs Error  Rel Err (%)
	 --------              ---------     ---------- ------------ ------------
	 DT1DC_LWOO             0.000014       0.000014   0.00000004         0.26
	 RPS_LWOO               3.303371       3.294874   0.00849652         0.26
	 A1DC_LWOO              1.608334       1.608337  -0.00000310         0.00
      3 differences.
      ERROR:NimbusProject:nc_compare exited with status 3

The output files are compared using the `nc_compare` tool.  The
`nc_compare` tool will show statistical differences between variables as
well as differences in the set of variables, their attributes, and the
global attributes.



^^^^^^^^^^^^^^^^^^^^^^^^
Creating baseline output
^^^^^^^^^^^^^^^^^^^^^^^^

The `--base` option to `pnimbus.py` can be used to create the baseline or
"production" dataset manually, rather than relying on existing production
data.  This is useful when the available production data have not been
updated recently, so they are out of sync with the "production" nimbus.
The raw data can be reprocessed with the production nimbus to create the
baseline output files, against which the output from a development version
of nimbus can be compared.

This example runs nimbus for both the baseline and development project
configurations to generate the nimbus output files.  The "production"
nimbus is whatever is found on the PATH, while the development nimbus is
specified with the `--nimbus` option.

Really `--base` is a convenient way to specify an output direcory which is
derived from the parent output directory.  If the parent project output
directory is `CSET`, then the baseline output directory is `CSET/BASE`.
The base and parent project can always be run separately by setting
the output directory and nimbus path explicitly.  The two examples below
run equivalent processing::

      pnimbus.py --project=WINTER --output=WINTER2/BASE nimbus rf09
      pnimbus.py --project=WINTER --output=WINTER2 --nimbus ../src/filter/nimbus nimbus rf09

The above steps run with one command::

      pnimbus.py --project=WINTER --base --output=WINTER2 nimbus rf09

Here is the output from the above command::

      barolo|166|% pnimbus.py --info --project=WINTER --base --output=WINTER2 nimbus rf09
      INFO:NimbusProject:BASE directory: WINTER2/BASE
      INFO:NimbusProject:Using local nimbus path by default since base is enabled: /h/eol/granger/code/sl7/raf-20140702-sync-server-merge/nimbus/src/filter/nimbus
      Using site_tools: /h/eol/granger/.scons/site_scons/eol_scons/tools
      Xvfb -displayfd 4
      Looking for available displays...Ignore errors about servers already running.
      _XSERVTransSocketINETCreateListener: ...SocketCreateListener() failed
      _XSERVTransMakeAllCOTSServerListeners: server already running
      _XSERVTransSocketINETCreateListener: ...SocketCreateListener() failed
      _XSERVTransMakeAllCOTSServerListeners: server already running
      INFO:NimbusProject:/opt/local/bin/nimbus -b WINTER2/BASE/setup_rf09 >& WINTER2/BASE/setup_rf09.log
      INFO:NimbusProject:/h/eol/granger/code/sl7/raf-20140702-sync-server-merge/nc_utils/ncReorder/ncReorder WINTER2/BASE/WINTERrf09.nc /tmp/tmpBn77vn/WINTERrf09.nc
      99%
      INFO:NimbusProject:mv /tmp/tmpBn77vn/WINTERrf09.nc WINTER2/BASE/WINTERrf09.nc
      Xvfb -displayfd 4
      Looking for available displays...Ignore errors about servers already running.
      _XSERVTransSocketINETCreateListener: ...SocketCreateListener() failed
      _XSERVTransMakeAllCOTSServerListeners: server already running
      _XSERVTransSocketINETCreateListener: ...SocketCreateListener() failed
      _XSERVTransMakeAllCOTSServerListeners: server already running
      INFO:NimbusProject:/h/eol/granger/code/sl7/raf-20140702-sync-server-merge/nimbus/src/filter/nimbus -b WINTER2/setup_rf09 >& WINTER2/setup_rf09.log
      INFO:NimbusProject:/h/eol/granger/code/sl7/raf-20140702-sync-server-merge/nc_utils/ncReorder/ncReorder WINTER2/WINTERrf09.nc /tmp/tmpmCmlqm/WINTERrf09.nc
      99%
      INFO:NimbusProject:mv /tmp/tmpmCmlqm/WINTERrf09.nc WINTER2/WINTERrf09.nc


The `--base` option is especially convenient when running comparisons::

      barolo|150|% pnimbus.py --info --project=WINTER --base --output=WINTER2 compare rf09
      INFO:NimbusProject:BASE directory: WINTER2/BASE
      INFO:NimbusProject:nc_compare WINTER2/BASE/WINTERrf09.nc WINTER2/WINTERrf09.nc
      --- WINTER2/BASE/WINTERrf09.nc (left)
      +++ WINTER2/WINTERrf09.nc (right)
      variables:
      !          float DUMMY_AFTL1(Time) ;
       -                 Category = "Raw" ;
       +                 Category = "Analog" ;
	 Variable              Left Mean     Right Mean    Abs Error  Rel Err (%)
	 --------              ---------     ---------- ------------ ------------
	 PFLWS_RPT             14.096433      14.096460  -0.00002766         0.00
	 PTMP_RPT              17.957996      17.958014  -0.00001717         0.00
	 PREF_RPT               8.163968       8.163973  -0.00000477         0.00
	 PLGB_RPT               0.363005       0.363005   0.00000006         0.00
	 PHGB_RPT               0.182454       0.182454   0.00000003         0.00
	 DELTAT_RPT           100.464905     100.464890   0.00001526         0.00
	 PMGB_RPT               0.352280       0.352280   0.00000003         0.00
      8 differences.
      ERROR:NimbusProject:nc_compare exited with status 8
