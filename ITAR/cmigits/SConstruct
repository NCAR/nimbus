# -*- python -*-
##  Copyright 2005,2006 UCAR, NCAR, All Rights Reserved

import os, re

opts = Variables('nidas.conf')
opts.AddVariables(('PREFIX',
                   'path to nidas include directory',
                   '/opt/nidas', None))

opts.AddVariables(('INSTALLROOT',
                   'where to install',
                   '/opt/nidas', None))

#  Create construction environment with user's PATH.
env = Environment(ENV = {'PATH' : os.environ['PATH']},
    tools=['default'])

opts.Add('BUILDS',
         'Space-separated list of architectures to build and install: host, arm or armbe.',
         'host arm armbe')

opts.Add('MACHS',
         'Space-separated list of machine names for the architecture (viper, vulcan, titan or all), for building and installing machine-specific code, such as kernel modules.',
         'all')

opts.Update(env)
BUILDS = Split(env['BUILDS'])

env['CFLAGS'] = [ '-Wall','-O2' ]
env['CXXFLAGS'] = [ '-Wall','-O2' ]

env['CCFLAGS'] = [ ]

env.Append(SHLIBMAJORVERSION = '1')
env.Append(SHLIBMINORVERSION = '0')
env.Append(USE_ARCHLIBDIR = 1)

##
##  Create the env for building to the host processor...
##
if 'host' in BUILDS or 'x86' in BUILDS:
    print "Setting up for host builds..."
    host_env = env.Clone(tools = ['symlink','sharedlibrary'],
        ARCH = ''
    )

    host_env['ARCHINSTALLROOT'] = env['INSTALLROOT']

    host_env.AppendUnique(CCFLAGS = ["-g"])
    host_env.AppendUnique(CXXFLAGS = ['-Wextra','-Weffc++'])

    exports = {'env':host_env}

    host_env.SConscript('SConscript',
               variant_dir='build',
               duplicate=0, exports=exports)

    Alias('x86','build')
    Alias('host','build')
    Clean('build','build')

##
##  Create the env for cross-building to the xScale ARM processor
##  (little-endian) on the arcom Viper and Titan.
##
if 'arm' in BUILDS:
    print "Setting up for arm build ..."

    arm_env = env.Clone(tools = ['armcross','symlink','sharedlibrary'],
        ARCH = 'arm',
    )

    arm_env['ARCHINSTALLROOT'] = env['INSTALLROOT'] + '/arm'

    # g++ version 3.4.4 often gives false positives when
    # trying to detect uninitialized variables.
    if re.search("^3",arm_env['CXXVERSION']):
        arm_env.AppendUnique(CXXFLAGS = ['-Wnon-virtual-dtor','-Wno-uninitialized'])
    if not arm_env.has_key('DEBUG') or not arm_env['DEBUG']:
        arm_env.AppendUnique(CPPDEFINES = ['NDEBUG'])

    arm_env.AppendUnique(CPPDEFINES = 'NIDAS_EMBEDDED')

    arm_env.SConscript('SConscript',
               variant_dir='build_arm',
               duplicate=0, exports=[{'env':arm_env}])
    Alias('arm','build_arm')
    Clean('build_arm','build_arm')

##
##  Create the env for cross-building to the xScale ARM processor
##  (big-endian) on the arcom Vulcan.
##
if 'armbe' in BUILDS:
    print "Setting up for armbe build ..."

    armbe_env = env.Clone(tools = ['armbecross','symlink','sharedlibrary'],
        ARCH = 'armbe'
    )
    armbe_env['ARCHINSTALLROOT'] = env['INSTALLROOT'] + '/armbe',

    armbe_env.AppendUnique(CPPDEFINES = 'NIDAS_EMBEDDED')

    if re.search("^3",armbe_env['CXXVERSION']):
        armbe_env.AppendUnique(CXXFLAGS = ['-Wnon-virtual-dtor','-Wno-uninitialized'])
    if not armbe_env.has_key('DEBUG') or not armbe_env['DEBUG']:
        armbe_env.AppendUnique(CPPDEFINES = ['NDEBUG'])

    armbe_env.SConscript('SConscript',
               variant_dir='build_armbe',
               duplicate=0, exports={'env':armbe_env})
    Alias('armbe','build_armbe')
    Clean('build_armbe','build_armbe')


Default([BUILDS])

